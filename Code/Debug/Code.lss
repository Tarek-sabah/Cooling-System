
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  000034fe  00003592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008001fe  008001fe  00003730  2**0
                  ALLOC
  3 .stab         00003414  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003660  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000a364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000a578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000cb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000e058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f364  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000f544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010265  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_10>
      2c:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 18 	call	0x3166	; 0x3166 <main>
      8a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 1a 	jmp	0x348c	; 0x348c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e3 58       	subi	r30, 0x83	; 131
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <M_TIMER0_void_Timer_Init>:
extern const TIMER0_SETTINGS_CONFIG TIMER0_SETTINGS_PARAMETERS;



void M_TIMER0_void_Timer_Init(const TIMER0_SETTINGS_CONFIG *TIMER_SETTING)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <M_TIMER0_void_Timer_Init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	/*Select The Mode of Operation*/
	TCCR0_REG &= TCCR0_WGM_MASK;
     ef8:	a3 e5       	ldi	r26, 0x53	; 83
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e3 e5       	ldi	r30, 0x53	; 83
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	87 7b       	andi	r24, 0xB7	; 183
     f04:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER_SETTING->WGM;
     f06:	a3 e5       	ldi	r26, 0x53	; 83
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e3 e5       	ldi	r30, 0x53	; 83
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	90 81       	ld	r25, Z
     f10:	e9 81       	ldd	r30, Y+1	; 0x01
     f12:	fa 81       	ldd	r31, Y+2	; 0x02
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	89 2b       	or	r24, r25
     f18:	8c 93       	st	X, r24

	TCCR0_REG &= TCCR0_COM_MASK;
     f1a:	a3 e5       	ldi	r26, 0x53	; 83
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e5       	ldi	r30, 0x53	; 83
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8f 7c       	andi	r24, 0xCF	; 207
     f26:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER_SETTING->COM;
     f28:	a3 e5       	ldi	r26, 0x53	; 83
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e3 e5       	ldi	r30, 0x53	; 83
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	90 81       	ld	r25, Z
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	82 81       	ldd	r24, Z+2	; 0x02
     f38:	89 2b       	or	r24, r25
     f3a:	8c 93       	st	X, r24
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <M_TIMER0_void_Timer_start>:

void M_TIMER0_void_Timer_start(const TIMER0_SETTINGS_CONFIG *TIMER_SETTING)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <M_TIMER0_void_Timer_start+0x6>
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9a 83       	std	Y+2, r25	; 0x02
     f52:	89 83       	std	Y+1, r24	; 0x01
//	TCNT0_REG=TIMER0_REQUIRED_REMINDER_COUNTS;
	TCCR0_REG &= TCCR0_CS_MASK;
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 7f       	andi	r24, 0xF8	; 248
     f60:	8c 93       	st	X, r24
	TCCR0_REG|= TIMER_SETTING->CS;
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	90 81       	ld	r25, Z
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	80 81       	ld	r24, Z
     f72:	89 2b       	or	r24, r25
     f74:	8c 93       	st	X, r24

}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <M_TIMER0_void_Timer_stop>:

void M_TIMER0_void_Timer_stop()
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TCCR0_CS_MASK;
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	8c 93       	st	X, r24
	TCNT0_REG=0;
     f96:	e2 e5       	ldi	r30, 0x52	; 82
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	10 82       	st	Z, r1
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <M_TIMER0_void_Timer_setDelayTimeMilliSec>:
//
//}


void M_TIMER0_void_Timer_setDelayTimeMilliSec(u16 Delay_Time_ms,const TIMER0_SETTINGS_CONFIG *TIMER_SETTING)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	6b 97       	sbiw	r28, 0x1b	; 27
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	9c 8b       	std	Y+20, r25	; 0x14
     fb8:	8b 8b       	std	Y+19, r24	; 0x13
     fba:	7e 8b       	std	Y+22, r23	; 0x16
     fbc:	6d 8b       	std	Y+21, r22	; 0x15
	u16 arr[]={0,1,8,64,1024};
     fbe:	ce 01       	movw	r24, r28
     fc0:	09 96       	adiw	r24, 0x09	; 9
     fc2:	98 8f       	std	Y+24, r25	; 0x18
     fc4:	8f 8b       	std	Y+23, r24	; 0x17
     fc6:	ed e7       	ldi	r30, 0x7D	; 125
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	fa 8f       	std	Y+26, r31	; 0x1a
     fcc:	e9 8f       	std	Y+25, r30	; 0x19
     fce:	fa e0       	ldi	r31, 0x0A	; 10
     fd0:	fb 8f       	std	Y+27, r31	; 0x1b
     fd2:	e9 8d       	ldd	r30, Y+25	; 0x19
     fd4:	fa 8d       	ldd	r31, Y+26	; 0x1a
     fd6:	00 80       	ld	r0, Z
     fd8:	89 8d       	ldd	r24, Y+25	; 0x19
     fda:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	9a 8f       	std	Y+26, r25	; 0x1a
     fe0:	89 8f       	std	Y+25, r24	; 0x19
     fe2:	ef 89       	ldd	r30, Y+23	; 0x17
     fe4:	f8 8d       	ldd	r31, Y+24	; 0x18
     fe6:	00 82       	st	Z, r0
     fe8:	8f 89       	ldd	r24, Y+23	; 0x17
     fea:	98 8d       	ldd	r25, Y+24	; 0x18
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	98 8f       	std	Y+24, r25	; 0x18
     ff0:	8f 8b       	std	Y+23, r24	; 0x17
     ff2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ff4:	91 50       	subi	r25, 0x01	; 1
     ff6:	9b 8f       	std	Y+27, r25	; 0x1b
     ff8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ffa:	ee 23       	and	r30, r30
     ffc:	51 f7       	brne	.-44     	; 0xfd2 <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x30>

	f32 Tick_Time = (f32) (arr[TIMER0_SETTINGS_PARAMETERS.CS-1])/FCPU;
     ffe:	80 91 fa 01 	lds	r24, 0x01FA
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	9c 01       	movw	r18, r24
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	fc 01       	movw	r30, r24
    1018:	38 96       	adiw	r30, 0x08	; 8
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	cc 01       	movw	r24, r24
    1020:	a0 e0       	ldi	r26, 0x00	; 0
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	34 e2       	ldi	r19, 0x24	; 36
    1038:	44 e7       	ldi	r20, 0x74	; 116
    103a:	5b e4       	ldi	r21, 0x4B	; 75
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	af 83       	std	Y+7, r26	; 0x07
    104a:	b8 87       	std	Y+8, r27	; 0x08
	u32 Desired_Ticks = (u32)(Delay_Time_ms/1000) / Tick_Time;
    104c:	8b 89       	ldd	r24, Y+19	; 0x13
    104e:	9c 89       	ldd	r25, Y+20	; 0x14
    1050:	28 ee       	ldi	r18, 0xE8	; 232
    1052:	33 e0       	ldi	r19, 0x03	; 3
    1054:	b9 01       	movw	r22, r18
    1056:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__udivmodhi4>
    105a:	cb 01       	movw	r24, r22
    105c:	cc 01       	movw	r24, r24
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	2d 81       	ldd	r18, Y+5	; 0x05
    1074:	3e 81       	ldd	r19, Y+6	; 0x06
    1076:	4f 81       	ldd	r20, Y+7	; 0x07
    1078:	58 85       	ldd	r21, Y+8	; 0x08
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	ab 83       	std	Y+3, r26	; 0x03
    1094:	bc 83       	std	Y+4, r27	; 0x04

	if(TIMER0_SETTINGS_PARAMETERS.WGM == TIMER0_MODE_SELECTOR_NORMAL)
    1096:	80 91 fb 01 	lds	r24, 0x01FB
    109a:	88 23       	and	r24, r24
    109c:	01 f5       	brne	.+64     	; 0x10de <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x13c>
	{
		TIMER0_REQUIRED_OVERFLOW_COUNTS = Desired_Ticks / 256;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	ab 81       	ldd	r26, Y+3	; 0x03
    10a4:	bc 81       	ldd	r27, Y+4	; 0x04
    10a6:	89 2f       	mov	r24, r25
    10a8:	9a 2f       	mov	r25, r26
    10aa:	ab 2f       	mov	r26, r27
    10ac:	bb 27       	eor	r27, r27
    10ae:	80 93 06 02 	sts	0x0206, r24
    10b2:	90 93 07 02 	sts	0x0207, r25
    10b6:	a0 93 08 02 	sts	0x0208, r26
    10ba:	b0 93 09 02 	sts	0x0209, r27
		TIMER0_REQUIRED_REMINDER_COUNTS = Desired_Ticks % 256;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	ab 81       	ldd	r26, Y+3	; 0x03
    10c4:	bc 81       	ldd	r27, Y+4	; 0x04
    10c6:	90 70       	andi	r25, 0x00	; 0
    10c8:	a0 70       	andi	r26, 0x00	; 0
    10ca:	b0 70       	andi	r27, 0x00	; 0
    10cc:	80 93 0a 02 	sts	0x020A, r24
    10d0:	90 93 0b 02 	sts	0x020B, r25
    10d4:	a0 93 0c 02 	sts	0x020C, r26
    10d8:	b0 93 0d 02 	sts	0x020D, r27
    10dc:	34 c0       	rjmp	.+104    	; 0x1146 <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x1a4>
	}

	else if(TIMER0_SETTINGS_PARAMETERS.WGM == TIMER0_MODE_SELECTOR_CTC)
    10de:	80 91 fb 01 	lds	r24, 0x01FB
    10e2:	88 30       	cpi	r24, 0x08	; 8
    10e4:	81 f5       	brne	.+96     	; 0x1146 <M_TIMER0_void_Timer_setDelayTimeMilliSec+0x1a4>
	{
		TIMER0_REQUIRED_OVERFLOW_COUNTS = Desired_Ticks / TIMER0_SETTINGS_PARAMETERS.CTC_value;
    10e6:	80 91 fd 01 	lds	r24, 0x01FD
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	ab 81       	ldd	r26, Y+3	; 0x03
    10f8:	bc 81       	ldd	r27, Y+4	; 0x04
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodsi4>
    1102:	da 01       	movw	r26, r20
    1104:	c9 01       	movw	r24, r18
    1106:	80 93 06 02 	sts	0x0206, r24
    110a:	90 93 07 02 	sts	0x0207, r25
    110e:	a0 93 08 02 	sts	0x0208, r26
    1112:	b0 93 09 02 	sts	0x0209, r27
		TIMER0_REQUIRED_REMINDER_COUNTS = Desired_Ticks % TIMER0_SETTINGS_PARAMETERS.CTC_value;
    1116:	80 91 fd 01 	lds	r24, 0x01FD
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	ab 81       	ldd	r26, Y+3	; 0x03
    1128:	bc 81       	ldd	r27, Y+4	; 0x04
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodsi4>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	80 93 0a 02 	sts	0x020A, r24
    113a:	90 93 0b 02 	sts	0x020B, r25
    113e:	a0 93 0c 02 	sts	0x020C, r26
    1142:	b0 93 0d 02 	sts	0x020D, r27
	}

}
    1146:	6b 96       	adiw	r28, 0x1b	; 27
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <M_TIMER0_void_EnableInt>:



void M_TIMER0_void_EnableInt()
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG &=0xFC;
    1160:	a9 e5       	ldi	r26, 0x59	; 89
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e9 e5       	ldi	r30, 0x59	; 89
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8c 7f       	andi	r24, 0xFC	; 252
    116c:	8c 93       	st	X, r24
	if(TIMER0_SETTINGS_PARAMETERS.WGM==TIMER0_MODE_SELECTOR_NORMAL)
    116e:	80 91 fb 01 	lds	r24, 0x01FB
    1172:	88 23       	and	r24, r24
    1174:	41 f4       	brne	.+16     	; 0x1186 <M_TIMER0_void_EnableInt+0x2e>
	{
		TIMSK_REG |= 0x01;
    1176:	a9 e5       	ldi	r26, 0x59	; 89
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e9 e5       	ldi	r30, 0x59	; 89
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	81 60       	ori	r24, 0x01	; 1
    1182:	8c 93       	st	X, r24
    1184:	0b c0       	rjmp	.+22     	; 0x119c <M_TIMER0_void_EnableInt+0x44>
	}
	else if(TIMER0_SETTINGS_PARAMETERS.WGM == TIMER0_MODE_SELECTOR_CTC)
    1186:	80 91 fb 01 	lds	r24, 0x01FB
    118a:	88 30       	cpi	r24, 0x08	; 8
    118c:	39 f4       	brne	.+14     	; 0x119c <M_TIMER0_void_EnableInt+0x44>
	{
		TIMSK_REG |= 0x02;
    118e:	a9 e5       	ldi	r26, 0x59	; 89
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e9 e5       	ldi	r30, 0x59	; 89
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	82 60       	ori	r24, 0x02	; 2
    119a:	8c 93       	st	X, r24
	}

}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt()
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG &= 0xFE;
    11aa:	a9 e5       	ldi	r26, 0x59	; 89
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e9 e5       	ldi	r30, 0x59	; 89
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8e 7f       	andi	r24, 0xFE	; 254
    11b6:	8c 93       	st	X, r24
}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <M_TIMER0_void_COMP_setCallBack>:


void M_TIMER0_void_COMP_setCallBack(void (*ptr)(void))
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <M_TIMER0_void_COMP_setCallBack+0x6>
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	31 f0       	breq	.+12     	; 0x11e0 <M_TIMER0_void_COMP_setCallBack+0x22>
	{
		TIMER0_COMP_CallBack = ptr;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	90 93 01 02 	sts	0x0201, r25
    11dc:	80 93 00 02 	sts	0x0200, r24
	}
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <M_TIMER0_void_OVF_setCallBack>:


void M_TIMER0_void_OVF_setCallBack(void (*ptr)(void))
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <M_TIMER0_void_OVF_setCallBack+0x6>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	9a 81       	ldd	r25, Y+2	; 0x02
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	31 f0       	breq	.+12     	; 0x120c <M_TIMER0_void_OVF_setCallBack+0x22>
	{
		TIMER0_OVF_CallBack = ptr;
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	90 93 ff 01 	sts	0x01FF, r25
    1208:	80 93 fe 01 	sts	0x01FE, r24
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <M_TIMER0_void_setFastPWM>:


void M_TIMER0_void_setFastPWM(u32 Frequency ,u8 Duty)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <M_TIMER0_void_setFastPWM+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <M_TIMER0_void_setFastPWM+0x8>
    121e:	0f 92       	push	r0
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	69 83       	std	Y+1, r22	; 0x01
    1226:	7a 83       	std	Y+2, r23	; 0x02
    1228:	8b 83       	std	Y+3, r24	; 0x03
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	4d 83       	std	Y+5, r20	; 0x05
	OCR0_REG=100;
    122e:	ec e5       	ldi	r30, 0x5C	; 92
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	84 e6       	ldi	r24, 0x64	; 100
    1234:	80 83       	st	Z, r24
	TCCR0_REG &= TCCR0_CS_MASK;
    1236:	a3 e5       	ldi	r26, 0x53	; 83
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e3 e5       	ldi	r30, 0x53	; 83
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 7f       	andi	r24, 0xF8	; 248
    1242:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_CLK_SOURCE_8_PRESCALING;
    1244:	a3 e5       	ldi	r26, 0x53	; 83
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e3 e5       	ldi	r30, 0x53	; 83
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	82 60       	ori	r24, 0x02	; 2
    1250:	8c 93       	st	X, r24
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <M_TIMER0_void_setphaseCorrectPWM>:

void M_TIMER0_void_setphaseCorrectPWM(u8 Frequency ,u8 Duty)
{
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <M_TIMER0_void_setphaseCorrectPWM+0xa>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	6a 83       	std	Y+2, r22	; 0x02

	OCR0_REG = (u8)(256.0*Duty/100.0);
    1274:	0c e5       	ldi	r16, 0x5C	; 92
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	aa 27       	eor	r26, r26
    1280:	97 fd       	sbrc	r25, 7
    1282:	a0 95       	com	r26
    1284:	ba 2f       	mov	r27, r26
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	53 e4       	ldi	r21, 0x43	; 67
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	48 ec       	ldi	r20, 0xC8	; 200
    12b0:	52 e4       	ldi	r21, 0x42	; 66
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	80 83       	st	Z, r24
	TCCR0_REG &= TCCR0_CS_MASK;
    12ca:	a3 e5       	ldi	r26, 0x53	; 83
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e3 e5       	ldi	r30, 0x53	; 83
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	8c 93       	st	X, r24
	TCCR0_REG |= Frequency;
    12d8:	a3 e5       	ldi	r26, 0x53	; 83
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e3 e5       	ldi	r30, 0x53	; 83
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	90 81       	ld	r25, Z
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	89 2b       	or	r24, r25
    12e6:	8c 93       	st	X, r24
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <__vector_10>:



void __vector_10 (void)
{
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OVERFLOW_COUNTER++;
    1320:	80 91 02 02 	lds	r24, 0x0202
    1324:	90 91 03 02 	lds	r25, 0x0203
    1328:	a0 91 04 02 	lds	r26, 0x0204
    132c:	b0 91 05 02 	lds	r27, 0x0205
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	a1 1d       	adc	r26, r1
    1334:	b1 1d       	adc	r27, r1
    1336:	80 93 02 02 	sts	0x0202, r24
    133a:	90 93 03 02 	sts	0x0203, r25
    133e:	a0 93 04 02 	sts	0x0204, r26
    1342:	b0 93 05 02 	sts	0x0205, r27

	if(TIMER0_OVERFLOW_COUNTER==(TIMER0_REQUIRED_OVERFLOW_COUNTS+1))
    1346:	80 91 06 02 	lds	r24, 0x0206
    134a:	90 91 07 02 	lds	r25, 0x0207
    134e:	a0 91 08 02 	lds	r26, 0x0208
    1352:	b0 91 09 02 	lds	r27, 0x0209
    1356:	9c 01       	movw	r18, r24
    1358:	ad 01       	movw	r20, r26
    135a:	2f 5f       	subi	r18, 0xFF	; 255
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	4f 4f       	sbci	r20, 0xFF	; 255
    1360:	5f 4f       	sbci	r21, 0xFF	; 255
    1362:	80 91 02 02 	lds	r24, 0x0202
    1366:	90 91 03 02 	lds	r25, 0x0203
    136a:	a0 91 04 02 	lds	r26, 0x0204
    136e:	b0 91 05 02 	lds	r27, 0x0205
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
    1376:	4a 07       	cpc	r20, r26
    1378:	5b 07       	cpc	r21, r27
    137a:	69 f4       	brne	.+26     	; 0x1396 <__vector_10+0xa0>
	{
		TIMER0_COMP_CallBack ();
    137c:	e0 91 00 02 	lds	r30, 0x0200
    1380:	f0 91 01 02 	lds	r31, 0x0201
    1384:	09 95       	icall
		TIMER0_OVERFLOW_COUNTER=0;
    1386:	10 92 02 02 	sts	0x0202, r1
    138a:	10 92 03 02 	sts	0x0203, r1
    138e:	10 92 04 02 	sts	0x0204, r1
    1392:	10 92 05 02 	sts	0x0205, r1
	}

}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__vector_11>:


void __vector_11 (void)
{
    13bc:	1f 92       	push	r1
    13be:	0f 92       	push	r0
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	0f 92       	push	r0
    13c4:	11 24       	eor	r1, r1
    13c6:	2f 93       	push	r18
    13c8:	3f 93       	push	r19
    13ca:	4f 93       	push	r20
    13cc:	5f 93       	push	r21
    13ce:	6f 93       	push	r22
    13d0:	7f 93       	push	r23
    13d2:	8f 93       	push	r24
    13d4:	9f 93       	push	r25
    13d6:	af 93       	push	r26
    13d8:	bf 93       	push	r27
    13da:	ef 93       	push	r30
    13dc:	ff 93       	push	r31
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OVERFLOW_COUNTER++;
    13e6:	80 91 02 02 	lds	r24, 0x0202
    13ea:	90 91 03 02 	lds	r25, 0x0203
    13ee:	a0 91 04 02 	lds	r26, 0x0204
    13f2:	b0 91 05 02 	lds	r27, 0x0205
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	b1 1d       	adc	r27, r1
    13fc:	80 93 02 02 	sts	0x0202, r24
    1400:	90 93 03 02 	sts	0x0203, r25
    1404:	a0 93 04 02 	sts	0x0204, r26
    1408:	b0 93 05 02 	sts	0x0205, r27

	if(TIMER0_OVERFLOW_COUNTER==(TIMER0_REQUIRED_OVERFLOW_COUNTS+1))
    140c:	80 91 06 02 	lds	r24, 0x0206
    1410:	90 91 07 02 	lds	r25, 0x0207
    1414:	a0 91 08 02 	lds	r26, 0x0208
    1418:	b0 91 09 02 	lds	r27, 0x0209
    141c:	9c 01       	movw	r18, r24
    141e:	ad 01       	movw	r20, r26
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	4f 4f       	sbci	r20, 0xFF	; 255
    1426:	5f 4f       	sbci	r21, 0xFF	; 255
    1428:	80 91 02 02 	lds	r24, 0x0202
    142c:	90 91 03 02 	lds	r25, 0x0203
    1430:	a0 91 04 02 	lds	r26, 0x0204
    1434:	b0 91 05 02 	lds	r27, 0x0205
    1438:	28 17       	cp	r18, r24
    143a:	39 07       	cpc	r19, r25
    143c:	4a 07       	cpc	r20, r26
    143e:	5b 07       	cpc	r21, r27
    1440:	69 f4       	brne	.+26     	; 0x145c <__vector_11+0xa0>
	{
		TIMER0_OVF_CallBack();
    1442:	e0 91 fe 01 	lds	r30, 0x01FE
    1446:	f0 91 ff 01 	lds	r31, 0x01FF
    144a:	09 95       	icall
		TIMER0_OVERFLOW_COUNTER=0;
    144c:	10 92 02 02 	sts	0x0202, r1
    1450:	10 92 03 02 	sts	0x0203, r1
    1454:	10 92 04 02 	sts	0x0204, r1
    1458:	10 92 05 02 	sts	0x0205, r1
	}
}
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	ff 91       	pop	r31
    1462:	ef 91       	pop	r30
    1464:	bf 91       	pop	r27
    1466:	af 91       	pop	r26
    1468:	9f 91       	pop	r25
    146a:	8f 91       	pop	r24
    146c:	7f 91       	pop	r23
    146e:	6f 91       	pop	r22
    1470:	5f 91       	pop	r21
    1472:	4f 91       	pop	r20
    1474:	3f 91       	pop	r19
    1476:	2f 91       	pop	r18
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	0f 90       	pop	r0
    147e:	1f 90       	pop	r1
    1480:	18 95       	reti

00001482 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	2b 97       	sbiw	r28, 0x0b	; 11
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	9d 83       	std	Y+5, r25	; 0x05
    1498:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <Port_Init+0x22>
    14a2:	40 c2       	rjmp	.+1152   	; 0x1924 <Port_Init+0x4a2>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    14a4:	1b 82       	std	Y+3, r1	; 0x03
    14a6:	3a c2       	rjmp	.+1140   	; 0x191c <Port_Init+0x49a>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	88 2f       	mov	r24, r24
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 01       	movw	r18, r24
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	22 0f       	add	r18, r18
    14b6:	33 1f       	adc	r19, r19
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	fc 01       	movw	r30, r24
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	80 81       	ld	r24, Z
    14c4:	9a e0       	ldi	r25, 0x0A	; 10
    14c6:	69 2f       	mov	r22, r25
    14c8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    14cc:	89 2f       	mov	r24, r25
    14ce:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9c 01       	movw	r18, r24
    14d8:	22 0f       	add	r18, r18
    14da:	33 1f       	adc	r19, r19
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	fc 01       	movw	r30, r24
    14e6:	e2 0f       	add	r30, r18
    14e8:	f3 1f       	adc	r31, r19
    14ea:	80 81       	ld	r24, Z
    14ec:	9a e0       	ldi	r25, 0x0A	; 10
    14ee:	69 2f       	mov	r22, r25
    14f0:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    14f4:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9c 01       	movw	r18, r24
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	22 0f       	add	r18, r18
    1504:	33 1f       	adc	r19, r19
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
    1508:	9d 81       	ldd	r25, Y+5	; 0x05
    150a:	fc 01       	movw	r30, r24
    150c:	e2 0f       	add	r30, r18
    150e:	f3 1f       	adc	r31, r19
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	88 23       	and	r24, r24
    1514:	89 f0       	breq	.+34     	; 0x1538 <Port_Init+0xb6>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9c 01       	movw	r18, r24
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	fc 01       	movw	r30, r24
    152c:	e2 0f       	add	r30, r18
    152e:	f3 1f       	adc	r31, r19
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	09 f0       	breq	.+2      	; 0x1538 <Port_Init+0xb6>
    1536:	ef c1       	rjmp	.+990    	; 0x1916 <Port_Init+0x494>
				{
					switch(Local_port)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3b 87       	std	Y+11, r19	; 0x0b
    1540:	2a 87       	std	Y+10, r18	; 0x0a
    1542:	6a 85       	ldd	r22, Y+10	; 0x0a
    1544:	7b 85       	ldd	r23, Y+11	; 0x0b
    1546:	62 30       	cpi	r22, 0x02	; 2
    1548:	71 05       	cpc	r23, r1
    154a:	d1 f1       	breq	.+116    	; 0x15c0 <Port_Init+0x13e>
    154c:	8a 85       	ldd	r24, Y+10	; 0x0a
    154e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1550:	83 30       	cpi	r24, 0x03	; 3
    1552:	91 05       	cpc	r25, r1
    1554:	34 f4       	brge	.+12     	; 0x1562 <Port_Init+0xe0>
    1556:	2a 85       	ldd	r18, Y+10	; 0x0a
    1558:	3b 85       	ldd	r19, Y+11	; 0x0b
    155a:	21 30       	cpi	r18, 0x01	; 1
    155c:	31 05       	cpc	r19, r1
    155e:	71 f0       	breq	.+28     	; 0x157c <Port_Init+0xfa>
    1560:	94 c0       	rjmp	.+296    	; 0x168a <Port_Init+0x208>
    1562:	6a 85       	ldd	r22, Y+10	; 0x0a
    1564:	7b 85       	ldd	r23, Y+11	; 0x0b
    1566:	63 30       	cpi	r22, 0x03	; 3
    1568:	71 05       	cpc	r23, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <Port_Init+0xec>
    156c:	4b c0       	rjmp	.+150    	; 0x1604 <Port_Init+0x182>
    156e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1570:	9b 85       	ldd	r25, Y+11	; 0x0b
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	91 05       	cpc	r25, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <Port_Init+0xf8>
    1578:	67 c0       	rjmp	.+206    	; 0x1648 <Port_Init+0x1c6>
    157a:	87 c0       	rjmp	.+270    	; 0x168a <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    157c:	aa e3       	ldi	r26, 0x3A	; 58
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ea e3       	ldi	r30, 0x3A	; 58
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	40 81       	ld	r20, Z
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 01       	movw	r18, r24
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	fc 01       	movw	r30, r24
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	b9 01       	movw	r22, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <Port_Init+0x132>
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <Port_Init+0x12e>
    15b8:	cb 01       	movw	r24, r22
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	65 c0       	rjmp	.+202    	; 0x168a <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    15c0:	a7 e3       	ldi	r26, 0x37	; 55
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e7 e3       	ldi	r30, 0x37	; 55
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	40 81       	ld	r20, Z
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9c 01       	movw	r18, r24
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	22 0f       	add	r18, r18
    15d8:	33 1f       	adc	r19, r19
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	fc 01       	movw	r30, r24
    15e0:	e2 0f       	add	r30, r18
    15e2:	f3 1f       	adc	r31, r19
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	b9 01       	movw	r22, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <Port_Init+0x176>
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	8a 95       	dec	r24
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <Port_Init+0x172>
    15fc:	cb 01       	movw	r24, r22
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	43 c0       	rjmp	.+134    	; 0x168a <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1604:	a4 e3       	ldi	r26, 0x34	; 52
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e4 e3       	ldi	r30, 0x34	; 52
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	40 81       	ld	r20, Z
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 01       	movw	r18, r24
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	fc 01       	movw	r30, r24
    1624:	e2 0f       	add	r30, r18
    1626:	f3 1f       	adc	r31, r19
    1628:	82 81       	ldd	r24, Z+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	b9 01       	movw	r22, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <Port_Init+0x1ba>
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	8a 95       	dec	r24
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <Port_Init+0x1b6>
    1640:	cb 01       	movw	r24, r22
    1642:	84 2b       	or	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	21 c0       	rjmp	.+66     	; 0x168a <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1648:	a1 e3       	ldi	r26, 0x31	; 49
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e1 e3       	ldi	r30, 0x31	; 49
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	40 81       	ld	r20, Z
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 01       	movw	r18, r24
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	22 0f       	add	r18, r18
    1660:	33 1f       	adc	r19, r19
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	fc 01       	movw	r30, r24
    1668:	e2 0f       	add	r30, r18
    166a:	f3 1f       	adc	r31, r19
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <Port_Init+0x1fe>
    167c:	66 0f       	add	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <Port_Init+0x1fa>
    1684:	cb 01       	movw	r24, r22
    1686:	84 2b       	or	r24, r20
    1688:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c 01       	movw	r18, r24
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	fc 01       	movw	r30, r24
    16a0:	e2 0f       	add	r30, r18
    16a2:	f3 1f       	adc	r31, r19
    16a4:	81 81       	ldd	r24, Z+1	; 0x01
    16a6:	88 23       	and	r24, r24
    16a8:	89 f0       	breq	.+34     	; 0x16cc <Port_Init+0x24a>
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9c 01       	movw	r18, r24
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	fc 01       	movw	r30, r24
    16c0:	e2 0f       	add	r30, r18
    16c2:	f3 1f       	adc	r31, r19
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <Port_Init+0x24a>
    16ca:	25 c1       	rjmp	.+586    	; 0x1916 <Port_Init+0x494>
					{
						switch(Local_port)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	39 87       	std	Y+9, r19	; 0x09
    16d4:	28 87       	std	Y+8, r18	; 0x08
    16d6:	68 85       	ldd	r22, Y+8	; 0x08
    16d8:	79 85       	ldd	r23, Y+9	; 0x09
    16da:	62 30       	cpi	r22, 0x02	; 2
    16dc:	71 05       	cpc	r23, r1
    16de:	d1 f1       	breq	.+116    	; 0x1754 <Port_Init+0x2d2>
    16e0:	88 85       	ldd	r24, Y+8	; 0x08
    16e2:	99 85       	ldd	r25, Y+9	; 0x09
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	34 f4       	brge	.+12     	; 0x16f6 <Port_Init+0x274>
    16ea:	28 85       	ldd	r18, Y+8	; 0x08
    16ec:	39 85       	ldd	r19, Y+9	; 0x09
    16ee:	21 30       	cpi	r18, 0x01	; 1
    16f0:	31 05       	cpc	r19, r1
    16f2:	71 f0       	breq	.+28     	; 0x1710 <Port_Init+0x28e>
    16f4:	94 c0       	rjmp	.+296    	; 0x181e <Port_Init+0x39c>
    16f6:	68 85       	ldd	r22, Y+8	; 0x08
    16f8:	79 85       	ldd	r23, Y+9	; 0x09
    16fa:	63 30       	cpi	r22, 0x03	; 3
    16fc:	71 05       	cpc	r23, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <Port_Init+0x280>
    1700:	4b c0       	rjmp	.+150    	; 0x1798 <Port_Init+0x316>
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	99 85       	ldd	r25, Y+9	; 0x09
    1706:	84 30       	cpi	r24, 0x04	; 4
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <Port_Init+0x28c>
    170c:	67 c0       	rjmp	.+206    	; 0x17dc <Port_Init+0x35a>
    170e:	87 c0       	rjmp	.+270    	; 0x181e <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1710:	ab e3       	ldi	r26, 0x3B	; 59
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	eb e3       	ldi	r30, 0x3B	; 59
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	40 81       	ld	r20, Z
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9c 01       	movw	r18, r24
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	22 0f       	add	r18, r18
    1728:	33 1f       	adc	r19, r19
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	fc 01       	movw	r30, r24
    1730:	e2 0f       	add	r30, r18
    1732:	f3 1f       	adc	r31, r19
    1734:	81 81       	ldd	r24, Z+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	b9 01       	movw	r22, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <Port_Init+0x2c6>
    1744:	66 0f       	add	r22, r22
    1746:	77 1f       	adc	r23, r23
    1748:	8a 95       	dec	r24
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <Port_Init+0x2c2>
    174c:	cb 01       	movw	r24, r22
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	65 c0       	rjmp	.+202    	; 0x181e <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1754:	a8 e3       	ldi	r26, 0x38	; 56
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e3       	ldi	r30, 0x38	; 56
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	40 81       	ld	r20, Z
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	fc 01       	movw	r30, r24
    1774:	e2 0f       	add	r30, r18
    1776:	f3 1f       	adc	r31, r19
    1778:	81 81       	ldd	r24, Z+1	; 0x01
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	b9 01       	movw	r22, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <Port_Init+0x30a>
    1788:	66 0f       	add	r22, r22
    178a:	77 1f       	adc	r23, r23
    178c:	8a 95       	dec	r24
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <Port_Init+0x306>
    1790:	cb 01       	movw	r24, r22
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	43 c0       	rjmp	.+134    	; 0x181e <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1798:	a5 e3       	ldi	r26, 0x35	; 53
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	40 81       	ld	r20, Z
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c 01       	movw	r18, r24
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	fc 01       	movw	r30, r24
    17b8:	e2 0f       	add	r30, r18
    17ba:	f3 1f       	adc	r31, r19
    17bc:	81 81       	ldd	r24, Z+1	; 0x01
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	b9 01       	movw	r22, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <Port_Init+0x34e>
    17cc:	66 0f       	add	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	8a 95       	dec	r24
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <Port_Init+0x34a>
    17d4:	cb 01       	movw	r24, r22
    17d6:	84 2b       	or	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	21 c0       	rjmp	.+66     	; 0x181e <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	40 81       	ld	r20, Z
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	9c 01       	movw	r18, r24
    17ee:	22 0f       	add	r18, r18
    17f0:	33 1f       	adc	r19, r19
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	fc 01       	movw	r30, r24
    17fc:	e2 0f       	add	r30, r18
    17fe:	f3 1f       	adc	r31, r19
    1800:	81 81       	ldd	r24, Z+1	; 0x01
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	b9 01       	movw	r22, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <Port_Init+0x392>
    1810:	66 0f       	add	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	8a 95       	dec	r24
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <Port_Init+0x38e>
    1818:	cb 01       	movw	r24, r22
    181a:	84 2b       	or	r24, r20
    181c:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 01       	movw	r18, r24
    1826:	22 0f       	add	r18, r18
    1828:	33 1f       	adc	r19, r19
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	fc 01       	movw	r30, r24
    1834:	e2 0f       	add	r30, r18
    1836:	f3 1f       	adc	r31, r19
    1838:	83 81       	ldd	r24, Z+3	; 0x03
    183a:	88 23       	and	r24, r24
    183c:	09 f0       	breq	.+2      	; 0x1840 <Port_Init+0x3be>
    183e:	6b c0       	rjmp	.+214    	; 0x1916 <Port_Init+0x494>
						{
							switch(Local_port)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3f 83       	std	Y+7, r19	; 0x07
    1848:	2e 83       	std	Y+6, r18	; 0x06
    184a:	6e 81       	ldd	r22, Y+6	; 0x06
    184c:	7f 81       	ldd	r23, Y+7	; 0x07
    184e:	62 30       	cpi	r22, 0x02	; 2
    1850:	71 05       	cpc	r23, r1
    1852:	49 f1       	breq	.+82     	; 0x18a6 <Port_Init+0x424>
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	83 30       	cpi	r24, 0x03	; 3
    185a:	91 05       	cpc	r25, r1
    185c:	34 f4       	brge	.+12     	; 0x186a <Port_Init+0x3e8>
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	21 30       	cpi	r18, 0x01	; 1
    1864:	31 05       	cpc	r19, r1
    1866:	61 f0       	breq	.+24     	; 0x1880 <Port_Init+0x3fe>
    1868:	56 c0       	rjmp	.+172    	; 0x1916 <Port_Init+0x494>
    186a:	6e 81       	ldd	r22, Y+6	; 0x06
    186c:	7f 81       	ldd	r23, Y+7	; 0x07
    186e:	63 30       	cpi	r22, 0x03	; 3
    1870:	71 05       	cpc	r23, r1
    1872:	61 f1       	breq	.+88     	; 0x18cc <Port_Init+0x44a>
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	91 05       	cpc	r25, r1
    187c:	d1 f1       	breq	.+116    	; 0x18f2 <Port_Init+0x470>
    187e:	4b c0       	rjmp	.+150    	; 0x1916 <Port_Init+0x494>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1880:	ab e3       	ldi	r26, 0x3B	; 59
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	eb e3       	ldi	r30, 0x3B	; 59
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	40 81       	ld	r20, Z
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <Port_Init+0x41a>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <Port_Init+0x416>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	38 c0       	rjmp	.+112    	; 0x1916 <Port_Init+0x494>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    18a6:	a8 e3       	ldi	r26, 0x38	; 56
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e8 e3       	ldi	r30, 0x38	; 56
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	40 81       	ld	r20, Z
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <Port_Init+0x440>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <Port_Init+0x43c>
    18c6:	84 2b       	or	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	25 c0       	rjmp	.+74     	; 0x1916 <Port_Init+0x494>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    18cc:	a5 e3       	ldi	r26, 0x35	; 53
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e5 e3       	ldi	r30, 0x35	; 53
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	40 81       	ld	r20, Z
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <Port_Init+0x466>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <Port_Init+0x462>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	12 c0       	rjmp	.+36     	; 0x1916 <Port_Init+0x494>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    18f2:	a2 e3       	ldi	r26, 0x32	; 50
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	40 81       	ld	r20, Z
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <Port_Init+0x48c>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <Port_Init+0x488>
    1912:	84 2b       	or	r24, r20
    1914:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	8b 83       	std	Y+3, r24	; 0x03
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	8c 31       	cpi	r24, 0x1C	; 28
    1920:	08 f4       	brcc	.+2      	; 0x1924 <Port_Init+0x4a2>
    1922:	c2 cd       	rjmp	.-1148   	; 0x14a8 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    1924:	2b 96       	adiw	r28, 0x0b	; 11
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <M_GID_void_Enable>:

#include "Mcu_HW.h"
#include "GID_int.h"

void M_GID_void_Enable(void)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= 0x80;
    193e:	af e5       	ldi	r26, 0x5F	; 95
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <M_GID_void_Disable>:
void M_GID_void_Disable(void)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= 0x7F;
    195a:	af e5       	ldi	r26, 0x5F	; 95
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ef e5       	ldi	r30, 0x5F	; 95
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8f 77       	andi	r24, 0x7F	; 127
    1966:	8c 93       	st	X, r24
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <M_Dio_en_getPinValue+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <M_Dio_en_getPinValue+0x8>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <M_Dio_en_getPinValue+0xa>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9a e0       	ldi	r25, 0x0A	; 10
    1982:	69 2f       	mov	r22, r25
    1984:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    1988:	89 2f       	mov	r24, r25
    198a:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	9a e0       	ldi	r25, 0x0A	; 10
    1990:	69 2f       	mov	r22, r25
    1992:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    1996:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3e 83       	std	Y+6, r19	; 0x06
    19a0:	2d 83       	std	Y+5, r18	; 0x05
    19a2:	4d 81       	ldd	r20, Y+5	; 0x05
    19a4:	5e 81       	ldd	r21, Y+6	; 0x06
    19a6:	42 30       	cpi	r20, 0x02	; 2
    19a8:	51 05       	cpc	r21, r1
    19aa:	41 f1       	breq	.+80     	; 0x19fc <M_Dio_en_getPinValue+0x8e>
    19ac:	8d 81       	ldd	r24, Y+5	; 0x05
    19ae:	9e 81       	ldd	r25, Y+6	; 0x06
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	91 05       	cpc	r25, r1
    19b4:	34 f4       	brge	.+12     	; 0x19c2 <M_Dio_en_getPinValue+0x54>
    19b6:	2d 81       	ldd	r18, Y+5	; 0x05
    19b8:	3e 81       	ldd	r19, Y+6	; 0x06
    19ba:	21 30       	cpi	r18, 0x01	; 1
    19bc:	31 05       	cpc	r19, r1
    19be:	61 f0       	breq	.+24     	; 0x19d8 <M_Dio_en_getPinValue+0x6a>
    19c0:	52 c0       	rjmp	.+164    	; 0x1a66 <M_Dio_en_getPinValue+0xf8>
    19c2:	4d 81       	ldd	r20, Y+5	; 0x05
    19c4:	5e 81       	ldd	r21, Y+6	; 0x06
    19c6:	43 30       	cpi	r20, 0x03	; 3
    19c8:	51 05       	cpc	r21, r1
    19ca:	51 f1       	breq	.+84     	; 0x1a20 <M_Dio_en_getPinValue+0xb2>
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	84 30       	cpi	r24, 0x04	; 4
    19d2:	91 05       	cpc	r25, r1
    19d4:	b9 f1       	breq	.+110    	; 0x1a44 <M_Dio_en_getPinValue+0xd6>
    19d6:	47 c0       	rjmp	.+142    	; 0x1a66 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    19d8:	e9 e3       	ldi	r30, 0x39	; 57
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <M_Dio_en_getPinValue+0x82>
    19ec:	55 95       	asr	r21
    19ee:	47 95       	ror	r20
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <M_Dio_en_getPinValue+0x7e>
    19f4:	ca 01       	movw	r24, r20
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	35 c0       	rjmp	.+106    	; 0x1a66 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    19fc:	e6 e3       	ldi	r30, 0x36	; 54
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a9 01       	movw	r20, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <M_Dio_en_getPinValue+0xa6>
    1a10:	55 95       	asr	r21
    1a12:	47 95       	ror	r20
    1a14:	8a 95       	dec	r24
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <M_Dio_en_getPinValue+0xa2>
    1a18:	ca 01       	movw	r24, r20
    1a1a:	81 70       	andi	r24, 0x01	; 1
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	23 c0       	rjmp	.+70     	; 0x1a66 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    1a20:	e3 e3       	ldi	r30, 0x33	; 51
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <M_Dio_en_getPinValue+0xca>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <M_Dio_en_getPinValue+0xc6>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	11 c0       	rjmp	.+34     	; 0x1a66 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    1a44:	e0 e3       	ldi	r30, 0x30	; 48
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a9 01       	movw	r20, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <M_Dio_en_getPinValue+0xee>
    1a58:	55 95       	asr	r21
    1a5a:	47 95       	ror	r20
    1a5c:	8a 95       	dec	r24
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <M_Dio_en_getPinValue+0xea>
    1a60:	ca 01       	movw	r24, r20
    1a62:	81 70       	andi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	26 96       	adiw	r28, 0x06	; 6
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	28 97       	sbiw	r28, 0x08	; 8
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9a e0       	ldi	r25, 0x0A	; 10
    1a96:	69 2f       	mov	r22, r25
    1a98:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    1a9c:	89 2f       	mov	r24, r25
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9a e0       	ldi	r25, 0x0A	; 10
    1aa4:	69 2f       	mov	r22, r25
    1aa6:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    1aaa:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <M_Dio_void_setPinValue+0x3a>
    1ab2:	70 c0       	rjmp	.+224    	; 0x1b94 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	38 87       	std	Y+8, r19	; 0x08
    1abc:	2f 83       	std	Y+7, r18	; 0x07
    1abe:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac0:	98 85       	ldd	r25, Y+8	; 0x08
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	51 f1       	breq	.+84     	; 0x1b1c <M_Dio_void_setPinValue+0xa2>
    1ac8:	2f 81       	ldd	r18, Y+7	; 0x07
    1aca:	38 85       	ldd	r19, Y+8	; 0x08
    1acc:	23 30       	cpi	r18, 0x03	; 3
    1ace:	31 05       	cpc	r19, r1
    1ad0:	34 f4       	brge	.+12     	; 0x1ade <M_Dio_void_setPinValue+0x64>
    1ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad4:	98 85       	ldd	r25, Y+8	; 0x08
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <M_Dio_void_setPinValue+0x7a>
    1adc:	d3 c0       	rjmp	.+422    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
    1ade:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae0:	38 85       	ldd	r19, Y+8	; 0x08
    1ae2:	23 30       	cpi	r18, 0x03	; 3
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	71 f1       	breq	.+92     	; 0x1b44 <M_Dio_void_setPinValue+0xca>
    1ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aea:	98 85       	ldd	r25, Y+8	; 0x08
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	91 05       	cpc	r25, r1
    1af0:	e9 f1       	breq	.+122    	; 0x1b6c <M_Dio_void_setPinValue+0xf2>
    1af2:	c8 c0       	rjmp	.+400    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    1af4:	ab e3       	ldi	r26, 0x3B	; 59
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	eb e3       	ldi	r30, 0x3B	; 59
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <M_Dio_void_setPinValue+0x98>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <M_Dio_void_setPinValue+0x94>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	b4 c0       	rjmp	.+360    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    1b1c:	a8 e3       	ldi	r26, 0x38	; 56
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e8 e3       	ldi	r30, 0x38	; 56
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <M_Dio_void_setPinValue+0xc0>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <M_Dio_void_setPinValue+0xbc>
    1b3e:	84 2b       	or	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	a0 c0       	rjmp	.+320    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    1b44:	a5 e3       	ldi	r26, 0x35	; 53
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e3       	ldi	r30, 0x35	; 53
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <M_Dio_void_setPinValue+0xe8>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <M_Dio_void_setPinValue+0xe4>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	8c c0       	rjmp	.+280    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    1b6c:	a2 e3       	ldi	r26, 0x32	; 50
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e2 e3       	ldi	r30, 0x32	; 50
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <M_Dio_void_setPinValue+0x110>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <M_Dio_void_setPinValue+0x10c>
    1b8e:	84 2b       	or	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	78 c0       	rjmp	.+240    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		}
	}
	else if (Level == DIO_LOW)
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	88 23       	and	r24, r24
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <M_Dio_void_setPinValue+0x122>
    1b9a:	74 c0       	rjmp	.+232    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	3e 83       	std	Y+6, r19	; 0x06
    1ba4:	2d 83       	std	Y+5, r18	; 0x05
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	91 05       	cpc	r25, r1
    1bae:	61 f1       	breq	.+88     	; 0x1c08 <M_Dio_void_setPinValue+0x18e>
    1bb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb4:	23 30       	cpi	r18, 0x03	; 3
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	34 f4       	brge	.+12     	; 0x1bc6 <M_Dio_void_setPinValue+0x14c>
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	69 f0       	breq	.+26     	; 0x1bde <M_Dio_void_setPinValue+0x164>
    1bc4:	5f c0       	rjmp	.+190    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
    1bc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1bca:	23 30       	cpi	r18, 0x03	; 3
    1bcc:	31 05       	cpc	r19, r1
    1bce:	89 f1       	breq	.+98     	; 0x1c32 <M_Dio_void_setPinValue+0x1b8>
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	84 30       	cpi	r24, 0x04	; 4
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <M_Dio_void_setPinValue+0x162>
    1bda:	40 c0       	rjmp	.+128    	; 0x1c5c <M_Dio_void_setPinValue+0x1e2>
    1bdc:	53 c0       	rjmp	.+166    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    1bde:	ab e3       	ldi	r26, 0x3B	; 59
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	eb e3       	ldi	r30, 0x3B	; 59
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <M_Dio_void_setPinValue+0x182>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <M_Dio_void_setPinValue+0x17e>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	3e c0       	rjmp	.+124    	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    1c08:	a8 e3       	ldi	r26, 0x38	; 56
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e8 e3       	ldi	r30, 0x38	; 56
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <M_Dio_void_setPinValue+0x1ac>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <M_Dio_void_setPinValue+0x1a8>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	29 c0       	rjmp	.+82     	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    1c32:	a5 e3       	ldi	r26, 0x35	; 53
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e5 e3       	ldi	r30, 0x35	; 53
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <M_Dio_void_setPinValue+0x1d6>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <M_Dio_void_setPinValue+0x1d2>
    1c54:	80 95       	com	r24
    1c56:	84 23       	and	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    1c5c:	a2 e3       	ldi	r26, 0x32	; 50
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e2 e3       	ldi	r30, 0x32	; 50
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <M_Dio_void_setPinValue+0x200>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <M_Dio_void_setPinValue+0x1fc>
    1c7e:	80 95       	com	r24
    1c80:	84 23       	and	r24, r20
    1c82:	8c 93       	st	X, r24
		}
	}

}
    1c84:	28 96       	adiw	r28, 0x08	; 8
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <M_Dio_en_getPortValue+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <M_Dio_en_getPortValue+0x8>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	3c 83       	std	Y+4, r19	; 0x04
    1cac:	2b 83       	std	Y+3, r18	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	82 30       	cpi	r24, 0x02	; 2
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	d9 f0       	breq	.+54     	; 0x1cee <M_Dio_en_getPortValue+0x58>
    1cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cba:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbc:	23 30       	cpi	r18, 0x03	; 3
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	34 f4       	brge	.+12     	; 0x1cce <M_Dio_en_getPortValue+0x38>
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <M_Dio_en_getPortValue+0x4e>
    1ccc:	1e c0       	rjmp	.+60     	; 0x1d0a <M_Dio_en_getPortValue+0x74>
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	23 30       	cpi	r18, 0x03	; 3
    1cd4:	31 05       	cpc	r19, r1
    1cd6:	81 f0       	breq	.+32     	; 0x1cf8 <M_Dio_en_getPortValue+0x62>
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	9c 81       	ldd	r25, Y+4	; 0x04
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	91 05       	cpc	r25, r1
    1ce0:	81 f0       	breq	.+32     	; 0x1d02 <M_Dio_en_getPortValue+0x6c>
    1ce2:	13 c0       	rjmp	.+38     	; 0x1d0a <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    1ce4:	eb e3       	ldi	r30, 0x3B	; 59
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	0e c0       	rjmp	.+28     	; 0x1d0a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    1cee:	e8 e3       	ldi	r30, 0x38	; 56
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    1cf8:	e5 e3       	ldi	r30, 0x35	; 53
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    1d02:	e2 e3       	ldi	r30, 0x32	; 50
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <M_Dio_void_setPortValue+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <M_Dio_void_setPortValue+0x8>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3c 83       	std	Y+4, r19	; 0x04
    1d32:	2b 83       	std	Y+3, r18	; 0x03
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	d9 f0       	breq	.+54     	; 0x1d74 <M_Dio_void_setPortValue+0x5a>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	23 30       	cpi	r18, 0x03	; 3
    1d44:	31 05       	cpc	r19, r1
    1d46:	34 f4       	brge	.+12     	; 0x1d54 <M_Dio_void_setPortValue+0x3a>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <M_Dio_void_setPortValue+0x50>
    1d52:	1e c0       	rjmp	.+60     	; 0x1d90 <M_Dio_void_setPortValue+0x76>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	23 30       	cpi	r18, 0x03	; 3
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <M_Dio_void_setPortValue+0x64>
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	84 30       	cpi	r24, 0x04	; 4
    1d64:	91 05       	cpc	r25, r1
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <M_Dio_void_setPortValue+0x6e>
    1d68:	13 c0       	rjmp	.+38     	; 0x1d90 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    1d6a:	eb e3       	ldi	r30, 0x3B	; 59
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	80 83       	st	Z, r24
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    1d74:	e8 e3       	ldi	r30, 0x38	; 56
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	80 83       	st	Z, r24
    1d7c:	09 c0       	rjmp	.+18     	; 0x1d90 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    1d7e:	e5 e3       	ldi	r30, 0x35	; 53
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	80 83       	st	Z, r24
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    1d88:	e2 e3       	ldi	r30, 0x32	; 50
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	80 83       	st	Z, r24
	}
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <M_Dio_void_togglePinValue+0x6>
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <M_Dio_void_togglePinValue+0x8>
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9a e0       	ldi	r25, 0x0A	; 10
    1db2:	69 2f       	mov	r22, r25
    1db4:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    1db8:	89 2f       	mov	r24, r25
    1dba:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9a e0       	ldi	r25, 0x0A	; 10
    1dc0:	69 2f       	mov	r22, r25
    1dc2:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodqi4>
    1dc6:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	3d 83       	std	Y+5, r19	; 0x05
    1dd0:	2c 83       	std	Y+4, r18	; 0x04
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	91 05       	cpc	r25, r1
    1dda:	51 f1       	breq	.+84     	; 0x1e30 <M_Dio_void_togglePinValue+0x92>
    1ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dde:	3d 81       	ldd	r19, Y+5	; 0x05
    1de0:	23 30       	cpi	r18, 0x03	; 3
    1de2:	31 05       	cpc	r19, r1
    1de4:	34 f4       	brge	.+12     	; 0x1df2 <M_Dio_void_togglePinValue+0x54>
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	91 05       	cpc	r25, r1
    1dee:	61 f0       	breq	.+24     	; 0x1e08 <M_Dio_void_togglePinValue+0x6a>
    1df0:	5a c0       	rjmp	.+180    	; 0x1ea6 <M_Dio_void_togglePinValue+0x108>
    1df2:	2c 81       	ldd	r18, Y+4	; 0x04
    1df4:	3d 81       	ldd	r19, Y+5	; 0x05
    1df6:	23 30       	cpi	r18, 0x03	; 3
    1df8:	31 05       	cpc	r19, r1
    1dfa:	71 f1       	breq	.+92     	; 0x1e58 <M_Dio_void_togglePinValue+0xba>
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	84 30       	cpi	r24, 0x04	; 4
    1e02:	91 05       	cpc	r25, r1
    1e04:	e9 f1       	breq	.+122    	; 0x1e80 <M_Dio_void_togglePinValue+0xe2>
    1e06:	4f c0       	rjmp	.+158    	; 0x1ea6 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    1e08:	ab e3       	ldi	r26, 0x3B	; 59
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	eb e3       	ldi	r30, 0x3B	; 59
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <M_Dio_void_togglePinValue+0x88>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <M_Dio_void_togglePinValue+0x84>
    1e2a:	84 27       	eor	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	3b c0       	rjmp	.+118    	; 0x1ea6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    1e30:	a8 e3       	ldi	r26, 0x38	; 56
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e8 e3       	ldi	r30, 0x38	; 56
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <M_Dio_void_togglePinValue+0xb0>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <M_Dio_void_togglePinValue+0xac>
    1e52:	84 27       	eor	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	27 c0       	rjmp	.+78     	; 0x1ea6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    1e58:	a5 e3       	ldi	r26, 0x35	; 53
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e3       	ldi	r30, 0x35	; 53
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <M_Dio_void_togglePinValue+0xd8>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <M_Dio_void_togglePinValue+0xd4>
    1e7a:	84 27       	eor	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	13 c0       	rjmp	.+38     	; 0x1ea6 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    1e80:	a2 e3       	ldi	r26, 0x32	; 50
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e2 e3       	ldi	r30, 0x32	; 50
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <M_Dio_void_togglePinValue+0x100>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <M_Dio_void_togglePinValue+0xfc>
    1ea2:	84 27       	eor	r24, r20
    1ea4:	8c 93       	st	X, r24
	}

}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <M_ADC_void_Init>:
static void (*ADC_CallBack) (void)= NULL;
static volatile u16 result=0;


void M_ADC_void_Init(const ADC_CONFIG* ADC_SETTINGS)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <M_ADC_void_Init+0x6>
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01

///*************************Selecting Voltage Refernce*************************/
//
	ADMUX_REG &=ADC_REFERENCE_MASK;
    1ec4:	a7 e2       	ldi	r26, 0x27	; 39
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e7 e2       	ldi	r30, 0x27	; 39
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 73       	andi	r24, 0x3F	; 63
    1ed0:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_SETTINGS->ADC_Vref;
    1ed2:	a7 e2       	ldi	r26, 0x27	; 39
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e7 e2       	ldi	r30, 0x27	; 39
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	90 81       	ld	r25, Z
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	81 81       	ldd	r24, Z+1	; 0x01
    1ee2:	89 2b       	or	r24, r25
    1ee4:	8c 93       	st	X, r24
///****************************************************************************/
//
///*************************ADC Trigger Mode*************************/
//
////	CLR_BIT(ADMUX_REG,ADC_AUTO_TRIGGER_BIT);
	SET_BIT(ADMUX_REG,ADC_AUTO_TRIGGER_BIT);
    1ee6:	a7 e2       	ldi	r26, 0x27	; 39
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e7 e2       	ldi	r30, 0x27	; 39
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 62       	ori	r24, 0x20	; 32
    1ef2:	8c 93       	st	X, r24
	SFIOR_REG &= ADC_AUTO_TRIGGER_SOURCE_MASK;
    1ef4:	a0 e5       	ldi	r26, 0x50	; 80
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e0 e5       	ldi	r30, 0x50	; 80
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 71       	andi	r24, 0x1F	; 31
    1f00:	8c 93       	st	X, r24
	SFIOR_REG |= Free_Running_mode;
    1f02:	a0 e5       	ldi	r26, 0x50	; 80
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e0 e5       	ldi	r30, 0x50	; 80
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8c 93       	st	X, r24
///****************************************************************************/
//
///*************************ADC Selecting Adjustment*************************/
	CLR_BIT(ADMUX_REG,ADC_LEFT_ADJUST_BIT);
    1f0e:	a7 e2       	ldi	r26, 0x27	; 39
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e7 e2       	ldi	r30, 0x27	; 39
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	8f 7d       	andi	r24, 0xDF	; 223
    1f1a:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,ADC_SETTINGS->ADC_Adjust);
    1f1c:	a7 e2       	ldi	r26, 0x27	; 39
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e7 e2       	ldi	r30, 0x27	; 39
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 2e       	mov	r0, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <M_ADC_void_Init+0x88>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	0a 94       	dec	r0
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <M_ADC_void_Init+0x84>
    1f42:	84 2b       	or	r24, r20
    1f44:	8c 93       	st	X, r24
///****************************************************************************/
//
///*************************ADC Selecting Prescaler*************************/
//
	ADCSRA_REG &=ADC_PRESCALER_MASK;
    1f46:	a6 e2       	ldi	r26, 0x26	; 38
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e6 e2       	ldi	r30, 0x26	; 38
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 7f       	andi	r24, 0xF8	; 248
    1f52:	8c 93       	st	X, r24
	ADCSRA_REG|=ADC_SETTINGS->ADC_Prescaler;
    1f54:	a6 e2       	ldi	r26, 0x26	; 38
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e6 e2       	ldi	r30, 0x26	; 38
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	90 81       	ld	r25, Z
    1f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f60:	fa 81       	ldd	r31, Y+2	; 0x02
    1f62:	80 81       	ld	r24, Z
    1f64:	89 2b       	or	r24, r25
    1f66:	8c 93       	st	X, r24
///****************************************************************************/
//
//
///*************************ADC Clearing Interrupt Flag*************************/
//
	SET_BIT(ADCSRA_REG,ADC_INT_FLAG_BIT);
    1f68:	a6 e2       	ldi	r26, 0x26	; 38
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e6 e2       	ldi	r30, 0x26	; 38
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 61       	ori	r24, 0x10	; 16
    1f74:	8c 93       	st	X, r24
///****************************************************************************/
//
///*************************ADC Enable*************************/
//
	SET_BIT(ADCSRA_REG,ADC_ENABLE_BIT);
    1f76:	a6 e2       	ldi	r26, 0x26	; 38
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e6 e2       	ldi	r30, 0x26	; 38
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 68       	ori	r24, 0x80	; 128
    1f82:	8c 93       	st	X, r24
//
///****************************************************************************/


}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <M_ADC_getDigitalValueSynchNonBlocking>:
u16 M_ADC_getDigitalValueSynchNonBlocking (const ADC_Analog_Channel ADC_Channel)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	27 97       	sbiw	r28, 0x07	; 7
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
	u16 counter =0;
    1fa4:	1c 82       	std	Y+4, r1	; 0x04
    1fa6:	1b 82       	std	Y+3, r1	; 0x03
	u16 Value=0;
    1fa8:	1a 82       	std	Y+2, r1	; 0x02
    1faa:	19 82       	std	Y+1, r1	; 0x01
/*************************ADC Selecting Channel*************************/

	ADMUX_REG &= ADC_ADMUX_MASK;
    1fac:	a7 e2       	ldi	r26, 0x27	; 39
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e7 e2       	ldi	r30, 0x27	; 39
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 7e       	andi	r24, 0xE0	; 224
    1fb8:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_Channel;
    1fba:	a7 e2       	ldi	r26, 0x27	; 39
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e7 e2       	ldi	r30, 0x27	; 39
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	90 81       	ld	r25, Z
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	89 2b       	or	r24, r25
    1fc8:	8c 93       	st	X, r24
/****************************************************************************/

/*************************ADC Start Conversion*************************/

	SET_BIT(ADCSRA_REG,ADC_START_CONVERSION_BIT);
    1fca:	a6 e2       	ldi	r26, 0x26	; 38
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e6 e2       	ldi	r30, 0x26	; 38
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 64       	ori	r24, 0x40	; 64
    1fd6:	8c 93       	st	X, r24
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <M_ADC_getDigitalValueSynchNonBlocking+0x56>
/****************************************************************************/


	while(((GET_BIT(ADCSRA_REG,ADC_INT_FLAG_BIT))==0) && counter <= 20000)
	{
		counter++;
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03

	SET_BIT(ADCSRA_REG,ADC_START_CONVERSION_BIT);
/****************************************************************************/


	while(((GET_BIT(ADCSRA_REG,ADC_INT_FLAG_BIT))==0) && counter <= 20000)
    1fe4:	e6 e2       	ldi	r30, 0x26	; 38
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 95       	swap	r24
    1fec:	8f 70       	andi	r24, 0x0F	; 15
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	31 f4       	brne	.+12     	; 0x2006 <M_ADC_getDigitalValueSynchNonBlocking+0x78>
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	2e e4       	ldi	r18, 0x4E	; 78
    2000:	81 32       	cpi	r24, 0x21	; 33
    2002:	92 07       	cpc	r25, r18
    2004:	50 f3       	brcs	.-44     	; 0x1fda <M_ADC_getDigitalValueSynchNonBlocking+0x4c>
	{
		counter++;
	}
	counter=0;
    2006:	1c 82       	std	Y+4, r1	; 0x04
    2008:	1b 82       	std	Y+3, r1	; 0x03
	if((GET_BIT(ADCSRA_REG,ADC_INT_FLAG_BIT))==(1))
    200a:	e6 e2       	ldi	r30, 0x26	; 38
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	82 95       	swap	r24
    2012:	8f 70       	andi	r24, 0x0F	; 15
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	81 70       	andi	r24, 0x01	; 1
    201a:	90 70       	andi	r25, 0x00	; 0
    201c:	88 23       	and	r24, r24
    201e:	81 f0       	breq	.+32     	; 0x2040 <M_ADC_getDigitalValueSynchNonBlocking+0xb2>
	{
		CLR_BIT(ADCSRA_REG,ADC_INT_FLAG_BIT);
    2020:	a6 e2       	ldi	r26, 0x26	; 38
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e2       	ldi	r30, 0x26	; 38
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8f 7e       	andi	r24, 0xEF	; 239
    202c:	8c 93       	st	X, r24
		return ADCLH_REG;
    202e:	e4 e2       	ldi	r30, 0x24	; 36
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	9f 83       	std	Y+7, r25	; 0x07
    2038:	8e 83       	std	Y+6, r24	; 0x06
	}



}
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	00 c0       	rjmp	.+0      	; 0x2040 <M_ADC_getDigitalValueSynchNonBlocking+0xb2>
    2040:	27 96       	adiw	r28, 0x07	; 7
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <M_ADC_void_EnableInt>:

void M_ADC_void_EnableInt()
{
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	/*************************ADC Enable Interrupt*************************/

		SET_BIT(ADCSRA_REG,ADC_INT_ENABLE_BIT);
    205a:	a6 e2       	ldi	r26, 0x26	; 38
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e6 e2       	ldi	r30, 0x26	; 38
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	88 60       	ori	r24, 0x08	; 8
    2066:	8c 93       	st	X, r24
	/****************************************************************************/

}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <M_ADC_getDigitalValueAsynchCallBack>:
u16 M_ADC_getDigitalValueAsynchCallBack(ADC_Analog_Channel ADC_Channel,void (*ptr) (void))
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	00 d0       	rcall	.+0      	; 0x2074 <M_ADC_getDigitalValueAsynchCallBack+0x6>
    2074:	00 d0       	rcall	.+0      	; 0x2076 <M_ADC_getDigitalValueAsynchCallBack+0x8>
    2076:	0f 92       	push	r0
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	7b 83       	std	Y+3, r23	; 0x03
    2080:	6a 83       	std	Y+2, r22	; 0x02

	if(ptr != NULL)
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	31 f0       	breq	.+12     	; 0x2096 <M_ADC_getDigitalValueAsynchCallBack+0x28>
	{
		ADC_CallBack = ptr;
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	90 93 0f 02 	sts	0x020F, r25
    2092:	80 93 0e 02 	sts	0x020E, r24
	}
/*************************ADC Selecting Channel*************************/

	ADMUX_REG &= ADC_ADMUX_MASK;
    2096:	a7 e2       	ldi	r26, 0x27	; 39
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e7 e2       	ldi	r30, 0x27	; 39
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 7e       	andi	r24, 0xE0	; 224
    20a2:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_Channel;
    20a4:	a7 e2       	ldi	r26, 0x27	; 39
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e7 e2       	ldi	r30, 0x27	; 39
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	90 81       	ld	r25, Z
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	89 2b       	or	r24, r25
    20b2:	8c 93       	st	X, r24
/****************************************************************************/


/*************************ADC Start Conversion*************************/
	SET_BIT(ADCSRA_REG,ADC_START_CONVERSION_BIT);
    20b4:	a6 e2       	ldi	r26, 0x26	; 38
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e6 e2       	ldi	r30, 0x26	; 38
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	80 64       	ori	r24, 0x40	; 64
    20c0:	8c 93       	st	X, r24
/****************************************************************************/


}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <__vector_16>:



void __vector_16 (void)
{
    20d2:	1f 92       	push	r1
    20d4:	0f 92       	push	r0
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	0f 92       	push	r0
    20da:	11 24       	eor	r1, r1
    20dc:	2f 93       	push	r18
    20de:	3f 93       	push	r19
    20e0:	4f 93       	push	r20
    20e2:	5f 93       	push	r21
    20e4:	6f 93       	push	r22
    20e6:	7f 93       	push	r23
    20e8:	8f 93       	push	r24
    20ea:	9f 93       	push	r25
    20ec:	af 93       	push	r26
    20ee:	bf 93       	push	r27
    20f0:	ef 93       	push	r30
    20f2:	ff 93       	push	r31
    20f4:	df 93       	push	r29
    20f6:	cf 93       	push	r28
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
	ADC_CallBack();
    20fc:	e0 91 0e 02 	lds	r30, 0x020E
    2100:	f0 91 0f 02 	lds	r31, 0x020F
    2104:	09 95       	icall
}
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	ff 91       	pop	r31
    210c:	ef 91       	pop	r30
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	7f 91       	pop	r23
    2118:	6f 91       	pop	r22
    211a:	5f 91       	pop	r21
    211c:	4f 91       	pop	r20
    211e:	3f 91       	pop	r19
    2120:	2f 91       	pop	r18
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	0f 90       	pop	r0
    2128:	1f 90       	pop	r1
    212a:	18 95       	reti

0000212c <H_LM35_Calculate_Data>:
#include "LM35_int.h"
#include "ADC_int.h"
#include "LCD_int.h"

u16 H_LM35_Calculate_Data(u8 Channel)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	27 97       	sbiw	r28, 0x07	; 7
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	8f 83       	std	Y+7, r24	; 0x07
	u16 Data;
	f32 step_size = (5*1000.0/1024.0);
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e4       	ldi	r25, 0x40	; 64
    2146:	ac e9       	ldi	r26, 0x9C	; 156
    2148:	b0 e4       	ldi	r27, 0x40	; 64
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	ab 83       	std	Y+3, r26	; 0x03
    2150:	bc 83       	std	Y+4, r27	; 0x04
	Data = (u16)(ADCLH_REG* step_size)/10;
    2152:	e4 e2       	ldi	r30, 0x24	; 36
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	cc 01       	movw	r24, r24
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	29 81       	ldd	r18, Y+1	; 0x01
    2172:	3a 81       	ldd	r19, Y+2	; 0x02
    2174:	4b 81       	ldd	r20, Y+3	; 0x03
    2176:	5c 81       	ldd	r21, Y+4	; 0x04
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	2a e0       	ldi	r18, 0x0A	; 10
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	b9 01       	movw	r22, r18
    2192:	0e 94 f5 19 	call	0x33ea	; 0x33ea <__udivmodhi4>
    2196:	cb 01       	movw	r24, r22
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
	return Data;
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
}
    21a0:	27 96       	adiw	r28, 0x07	; 7
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <H_LCD_void_latchByte>:
#include "LCD_int.h"



static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    21b2:	0f 93       	push	r16
    21b4:	1f 93       	push	r17
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	c1 56       	subi	r28, 0x61	; 97
    21c0:	d0 40       	sbci	r29, 0x00	; 0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	fe 01       	movw	r30, r28
    21ce:	ef 59       	subi	r30, 0x9F	; 159
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 83       	st	Z, r24
#if(LCD_MODE == _4_BIT_MODE)
	{
		/*
		 * HIGH LEVEL PINS
		 */
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=0
    21d4:	8c e0       	ldi	r24, 0x0C	; 12
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D4_PIN,GET_BIT(copy_u8Byte,4));
    21dc:	fe 01       	movw	r30, r28
    21de:	ef 59       	subi	r30, 0x9F	; 159
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	82 95       	swap	r24
    21e6:	8f 70       	andi	r24, 0x0F	; 15
    21e8:	98 2f       	mov	r25, r24
    21ea:	91 70       	andi	r25, 0x01	; 1
    21ec:	84 e1       	ldi	r24, 0x14	; 20
    21ee:	69 2f       	mov	r22, r25
    21f0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D5_PIN,GET_BIT(copy_u8Byte,5));
    21f4:	fe 01       	movw	r30, r28
    21f6:	ef 59       	subi	r30, 0x9F	; 159
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	82 95       	swap	r24
    21fe:	86 95       	lsr	r24
    2200:	87 70       	andi	r24, 0x07	; 7
    2202:	98 2f       	mov	r25, r24
    2204:	91 70       	andi	r25, 0x01	; 1
    2206:	85 e1       	ldi	r24, 0x15	; 21
    2208:	69 2f       	mov	r22, r25
    220a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D6_PIN,GET_BIT(copy_u8Byte,6));
    220e:	fe 01       	movw	r30, r28
    2210:	ef 59       	subi	r30, 0x9F	; 159
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	82 95       	swap	r24
    2218:	86 95       	lsr	r24
    221a:	86 95       	lsr	r24
    221c:	83 70       	andi	r24, 0x03	; 3
    221e:	98 2f       	mov	r25, r24
    2220:	91 70       	andi	r25, 0x01	; 1
    2222:	86 e1       	ldi	r24, 0x16	; 22
    2224:	69 2f       	mov	r22, r25
    2226:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D7_PIN,GET_BIT(copy_u8Byte,7));
    222a:	fe 01       	movw	r30, r28
    222c:	ef 59       	subi	r30, 0x9F	; 159
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 81       	ld	r24, Z
    2232:	98 2f       	mov	r25, r24
    2234:	99 1f       	adc	r25, r25
    2236:	99 27       	eor	r25, r25
    2238:	99 1f       	adc	r25, r25
    223a:	88 e1       	ldi	r24, 0x18	; 24
    223c:	69 2f       	mov	r22, r25
    223e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_HIGH);//LCD EN=1
    2242:	8c e0       	ldi	r24, 0x0C	; 12
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    224a:	fe 01       	movw	r30, r28
    224c:	e3 5a       	subi	r30, 0xA3	; 163
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 e8       	ldi	r26, 0x80	; 128
    2256:	bf e3       	ldi	r27, 0x3F	; 63
    2258:	80 83       	st	Z, r24
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	a2 83       	std	Z+2, r26	; 0x02
    225e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2260:	8e 01       	movw	r16, r28
    2262:	07 5a       	subi	r16, 0xA7	; 167
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	fe 01       	movw	r30, r28
    2268:	e3 5a       	subi	r30, 0xA3	; 163
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	2b ea       	ldi	r18, 0xAB	; 171
    2276:	3a ea       	ldi	r19, 0xAA	; 170
    2278:	4a ea       	ldi	r20, 0xAA	; 170
    227a:	50 e4       	ldi	r21, 0x40	; 64
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	f8 01       	movw	r30, r16
    2286:	80 83       	st	Z, r24
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	a2 83       	std	Z+2, r26	; 0x02
    228c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    228e:	fe 01       	movw	r30, r28
    2290:	e7 5a       	subi	r30, 0xA7	; 167
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	60 81       	ld	r22, Z
    2296:	71 81       	ldd	r23, Z+1	; 0x01
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	34 f4       	brge	.+12     	; 0x22b8 <H_LCD_void_latchByte+0x106>
		__ticks = 1;
    22ac:	fe 01       	movw	r30, r28
    22ae:	e8 5a       	subi	r30, 0xA8	; 168
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 83       	st	Z, r24
    22b6:	e0 c0       	rjmp	.+448    	; 0x2478 <H_LCD_void_latchByte+0x2c6>
	else if (__tmp > 255)
    22b8:	fe 01       	movw	r30, r28
    22ba:	e7 5a       	subi	r30, 0xA7	; 167
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	53 e4       	ldi	r21, 0x43	; 67
    22ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	0c f0       	brlt	.+2      	; 0x22d8 <H_LCD_void_latchByte+0x126>
    22d6:	c0 c0       	rjmp	.+384    	; 0x2458 <H_LCD_void_latchByte+0x2a6>
	{
		_delay_ms(__us / 1000.0);
    22d8:	fe 01       	movw	r30, r28
    22da:	e3 5a       	subi	r30, 0xA3	; 163
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	60 81       	ld	r22, Z
    22e0:	71 81       	ldd	r23, Z+1	; 0x01
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	4a e7       	ldi	r20, 0x7A	; 122
    22ec:	54 e4       	ldi	r21, 0x44	; 68
    22ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	fe 01       	movw	r30, r28
    22f8:	ec 5a       	subi	r30, 0xAC	; 172
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 83       	st	Z, r24
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	a2 83       	std	Z+2, r26	; 0x02
    2302:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2304:	8e 01       	movw	r16, r28
    2306:	00 5b       	subi	r16, 0xB0	; 176
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	fe 01       	movw	r30, r28
    230c:	ec 5a       	subi	r30, 0xAC	; 172
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	55 e4       	ldi	r21, 0x45	; 69
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	f8 01       	movw	r30, r16
    232a:	80 83       	st	Z, r24
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	a2 83       	std	Z+2, r26	; 0x02
    2330:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2332:	fe 01       	movw	r30, r28
    2334:	e0 5b       	subi	r30, 0xB0	; 176
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	44 f4       	brge	.+16     	; 0x2360 <H_LCD_void_latchByte+0x1ae>
		__ticks = 1;
    2350:	fe 01       	movw	r30, r28
    2352:	e2 5b       	subi	r30, 0xB2	; 178
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
    235e:	64 c0       	rjmp	.+200    	; 0x2428 <H_LCD_void_latchByte+0x276>
	else if (__tmp > 65535)
    2360:	fe 01       	movw	r30, r28
    2362:	e0 5b       	subi	r30, 0xB0	; 176
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	0c f0       	brlt	.+2      	; 0x2380 <H_LCD_void_latchByte+0x1ce>
    237e:	43 c0       	rjmp	.+134    	; 0x2406 <H_LCD_void_latchByte+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	fe 01       	movw	r30, r28
    2382:	ec 5a       	subi	r30, 0xAC	; 172
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8e 01       	movw	r16, r28
    23a0:	02 5b       	subi	r16, 0xB2	; 178
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	f8 01       	movw	r30, r16
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
    23b6:	1f c0       	rjmp	.+62     	; 0x23f6 <H_LCD_void_latchByte+0x244>
    23b8:	fe 01       	movw	r30, r28
    23ba:	e4 5b       	subi	r30, 0xB4	; 180
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 e9       	ldi	r24, 0x90	; 144
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23c6:	fe 01       	movw	r30, r28
    23c8:	e4 5b       	subi	r30, 0xB4	; 180
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <H_LCD_void_latchByte+0x21e>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e4 5b       	subi	r30, 0xB4	; 180
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	de 01       	movw	r26, r28
    23e0:	a2 5b       	subi	r26, 0xB2	; 178
    23e2:	bf 4f       	sbci	r27, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e2 5b       	subi	r30, 0xB2	; 178
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	11 96       	adiw	r26, 0x01	; 1
    23f2:	9c 93       	st	X, r25
    23f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	fe 01       	movw	r30, r28
    23f8:	e2 5b       	subi	r30, 0xB2	; 178
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 81       	ld	r24, Z
    23fe:	91 81       	ldd	r25, Z+1	; 0x01
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	d1 f6       	brne	.-76     	; 0x23b8 <H_LCD_void_latchByte+0x206>
    2404:	4b c0       	rjmp	.+150    	; 0x249c <H_LCD_void_latchByte+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	8e 01       	movw	r16, r28
    2408:	02 5b       	subi	r16, 0xB2	; 178
    240a:	1f 4f       	sbci	r17, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	e0 5b       	subi	r30, 0xB0	; 176
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	f8 01       	movw	r30, r16
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
    2428:	de 01       	movw	r26, r28
    242a:	a6 5b       	subi	r26, 0xB6	; 182
    242c:	bf 4f       	sbci	r27, 0xFF	; 255
    242e:	fe 01       	movw	r30, r28
    2430:	e2 5b       	subi	r30, 0xB2	; 178
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	11 96       	adiw	r26, 0x01	; 1
    243a:	9c 93       	st	X, r25
    243c:	8e 93       	st	-X, r24
    243e:	fe 01       	movw	r30, r28
    2440:	e6 5b       	subi	r30, 0xB6	; 182
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <H_LCD_void_latchByte+0x296>
    244c:	fe 01       	movw	r30, r28
    244e:	e6 5b       	subi	r30, 0xB6	; 182
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	22 c0       	rjmp	.+68     	; 0x249c <H_LCD_void_latchByte+0x2ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2458:	8e 01       	movw	r16, r28
    245a:	08 5a       	subi	r16, 0xA8	; 168
    245c:	1f 4f       	sbci	r17, 0xFF	; 255
    245e:	fe 01       	movw	r30, r28
    2460:	e7 5a       	subi	r30, 0xA7	; 167
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	f8 01       	movw	r30, r16
    2476:	80 83       	st	Z, r24
    2478:	de 01       	movw	r26, r28
    247a:	a7 5b       	subi	r26, 0xB7	; 183
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	fe 01       	movw	r30, r28
    2480:	e8 5a       	subi	r30, 0xA8	; 168
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 81       	ld	r24, Z
    2486:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2488:	fe 01       	movw	r30, r28
    248a:	e7 5b       	subi	r30, 0xB7	; 183
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	8a 95       	dec	r24
    2492:	f1 f7       	brne	.-4      	; 0x2490 <H_LCD_void_latchByte+0x2de>
    2494:	fe 01       	movw	r30, r28
    2496:	e7 5b       	subi	r30, 0xB7	; 183
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 83       	st	Z, r24
		_delay_us(1);
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=1
    249c:	8c e0       	ldi	r24, 0x0C	; 12
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    24a4:	fe 01       	movw	r30, r28
    24a6:	eb 5b       	subi	r30, 0xBB	; 187
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a8 ec       	ldi	r26, 0xC8	; 200
    24b0:	b2 e4       	ldi	r27, 0x42	; 66
    24b2:	80 83       	st	Z, r24
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	a2 83       	std	Z+2, r26	; 0x02
    24b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24ba:	8e 01       	movw	r16, r28
    24bc:	0f 5b       	subi	r16, 0xBF	; 191
    24be:	1f 4f       	sbci	r17, 0xFF	; 255
    24c0:	fe 01       	movw	r30, r28
    24c2:	eb 5b       	subi	r30, 0xBB	; 187
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	2b ea       	ldi	r18, 0xAB	; 171
    24d0:	3a ea       	ldi	r19, 0xAA	; 170
    24d2:	4a ea       	ldi	r20, 0xAA	; 170
    24d4:	50 e4       	ldi	r21, 0x40	; 64
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	f8 01       	movw	r30, r16
    24e0:	80 83       	st	Z, r24
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	a2 83       	std	Z+2, r26	; 0x02
    24e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e8:	fe 01       	movw	r30, r28
    24ea:	ef 5b       	subi	r30, 0xBF	; 191
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	34 f4       	brge	.+12     	; 0x2512 <H_LCD_void_latchByte+0x360>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	fe 01       	movw	r30, r28
    250a:	e0 5c       	subi	r30, 0xC0	; 192
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	80 83       	st	Z, r24
    2510:	9d c0       	rjmp	.+314    	; 0x264c <H_LCD_void_latchByte+0x49a>
	else if (__tmp > 255)
    2512:	fe 01       	movw	r30, r28
    2514:	ef 5b       	subi	r30, 0xBF	; 191
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	53 e4       	ldi	r21, 0x43	; 67
    2528:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	0c f0       	brlt	.+2      	; 0x2532 <H_LCD_void_latchByte+0x380>
    2530:	7e c0       	rjmp	.+252    	; 0x262e <H_LCD_void_latchByte+0x47c>
	{
		_delay_ms(__us / 1000.0);
    2532:	fe 01       	movw	r30, r28
    2534:	eb 5b       	subi	r30, 0xBB	; 187
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	54 e4       	ldi	r21, 0x44	; 68
    2548:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8c af       	std	Y+60, r24	; 0x3c
    2552:	9d af       	std	Y+61, r25	; 0x3d
    2554:	ae af       	std	Y+62, r26	; 0x3e
    2556:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	6c ad       	ldd	r22, Y+60	; 0x3c
    255a:	7d ad       	ldd	r23, Y+61	; 0x3d
    255c:	8e ad       	ldd	r24, Y+62	; 0x3e
    255e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a e7       	ldi	r20, 0x7A	; 122
    2566:	55 e4       	ldi	r21, 0x45	; 69
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	88 af       	std	Y+56, r24	; 0x38
    2572:	99 af       	std	Y+57, r25	; 0x39
    2574:	aa af       	std	Y+58, r26	; 0x3a
    2576:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2578:	68 ad       	ldd	r22, Y+56	; 0x38
    257a:	79 ad       	ldd	r23, Y+57	; 0x39
    257c:	8a ad       	ldd	r24, Y+58	; 0x3a
    257e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    258c:	88 23       	and	r24, r24
    258e:	2c f4       	brge	.+10     	; 0x259a <H_LCD_void_latchByte+0x3e8>
		__ticks = 1;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9f ab       	std	Y+55, r25	; 0x37
    2596:	8e ab       	std	Y+54, r24	; 0x36
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <H_LCD_void_latchByte+0x466>
	else if (__tmp > 65535)
    259a:	68 ad       	ldd	r22, Y+56	; 0x38
    259c:	79 ad       	ldd	r23, Y+57	; 0x39
    259e:	8a ad       	ldd	r24, Y+58	; 0x3a
    25a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	4c f5       	brge	.+82     	; 0x2604 <H_LCD_void_latchByte+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    25b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    25b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    25b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9f ab       	std	Y+55, r25	; 0x37
    25d8:	8e ab       	std	Y+54, r24	; 0x36
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <H_LCD_void_latchByte+0x448>
    25dc:	80 e9       	ldi	r24, 0x90	; 144
    25de:	91 e0       	ldi	r25, 0x01	; 1
    25e0:	9d ab       	std	Y+53, r25	; 0x35
    25e2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25e4:	8c a9       	ldd	r24, Y+52	; 0x34
    25e6:	9d a9       	ldd	r25, Y+53	; 0x35
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <H_LCD_void_latchByte+0x436>
    25ec:	9d ab       	std	Y+53, r25	; 0x35
    25ee:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8e a9       	ldd	r24, Y+54	; 0x36
    25f2:	9f a9       	ldd	r25, Y+55	; 0x37
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9f ab       	std	Y+55, r25	; 0x37
    25f8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	8e a9       	ldd	r24, Y+54	; 0x36
    25fc:	9f a9       	ldd	r25, Y+55	; 0x37
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	69 f7       	brne	.-38     	; 0x25dc <H_LCD_void_latchByte+0x42a>
    2602:	2d c0       	rjmp	.+90     	; 0x265e <H_LCD_void_latchByte+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	68 ad       	ldd	r22, Y+56	; 0x38
    2606:	79 ad       	ldd	r23, Y+57	; 0x39
    2608:	8a ad       	ldd	r24, Y+58	; 0x3a
    260a:	9b ad       	ldd	r25, Y+59	; 0x3b
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9f ab       	std	Y+55, r25	; 0x37
    2616:	8e ab       	std	Y+54, r24	; 0x36
    2618:	8e a9       	ldd	r24, Y+54	; 0x36
    261a:	9f a9       	ldd	r25, Y+55	; 0x37
    261c:	9b ab       	std	Y+51, r25	; 0x33
    261e:	8a ab       	std	Y+50, r24	; 0x32
    2620:	8a a9       	ldd	r24, Y+50	; 0x32
    2622:	9b a9       	ldd	r25, Y+51	; 0x33
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <H_LCD_void_latchByte+0x472>
    2628:	9b ab       	std	Y+51, r25	; 0x33
    262a:	8a ab       	std	Y+50, r24	; 0x32
    262c:	18 c0       	rjmp	.+48     	; 0x265e <H_LCD_void_latchByte+0x4ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    262e:	fe 01       	movw	r30, r28
    2630:	ef 5b       	subi	r30, 0xBF	; 191
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	fe 01       	movw	r30, r28
    2646:	e0 5c       	subi	r30, 0xC0	; 192
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 83       	st	Z, r24
    264c:	fe 01       	movw	r30, r28
    264e:	e0 5c       	subi	r30, 0xC0	; 192
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2656:	89 a9       	ldd	r24, Y+49	; 0x31
    2658:	8a 95       	dec	r24
    265a:	f1 f7       	brne	.-4      	; 0x2658 <H_LCD_void_latchByte+0x4a6>
    265c:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(100);
		/*
		 * LOW LEVEL PINS
		 */
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=0
    265e:	8c e0       	ldi	r24, 0x0C	; 12
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D4_PIN,GET_BIT(copy_u8Byte,0));
    2666:	fe 01       	movw	r30, r28
    2668:	ef 59       	subi	r30, 0x9F	; 159
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	98 2f       	mov	r25, r24
    2670:	91 70       	andi	r25, 0x01	; 1
    2672:	84 e1       	ldi	r24, 0x14	; 20
    2674:	69 2f       	mov	r22, r25
    2676:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D5_PIN,GET_BIT(copy_u8Byte,1));
    267a:	fe 01       	movw	r30, r28
    267c:	ef 59       	subi	r30, 0x9F	; 159
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	86 95       	lsr	r24
    2684:	98 2f       	mov	r25, r24
    2686:	91 70       	andi	r25, 0x01	; 1
    2688:	85 e1       	ldi	r24, 0x15	; 21
    268a:	69 2f       	mov	r22, r25
    268c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D6_PIN,GET_BIT(copy_u8Byte,2));
    2690:	fe 01       	movw	r30, r28
    2692:	ef 59       	subi	r30, 0x9F	; 159
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	86 95       	lsr	r24
    269a:	86 95       	lsr	r24
    269c:	98 2f       	mov	r25, r24
    269e:	91 70       	andi	r25, 0x01	; 1
    26a0:	86 e1       	ldi	r24, 0x16	; 22
    26a2:	69 2f       	mov	r22, r25
    26a4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(LCD_D7_PIN,GET_BIT(copy_u8Byte,3));
    26a8:	fe 01       	movw	r30, r28
    26aa:	ef 59       	subi	r30, 0x9F	; 159
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	86 95       	lsr	r24
    26b2:	86 95       	lsr	r24
    26b4:	86 95       	lsr	r24
    26b6:	98 2f       	mov	r25, r24
    26b8:	91 70       	andi	r25, 0x01	; 1
    26ba:	88 e1       	ldi	r24, 0x18	; 24
    26bc:	69 2f       	mov	r22, r25
    26be:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_HIGH);//LCD EN=1
    26c2:	8c e0       	ldi	r24, 0x0C	; 12
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e8       	ldi	r26, 0x80	; 128
    26d0:	bf e3       	ldi	r27, 0x3F	; 63
    26d2:	8d a7       	std	Y+45, r24	; 0x2d
    26d4:	9e a7       	std	Y+46, r25	; 0x2e
    26d6:	af a7       	std	Y+47, r26	; 0x2f
    26d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26da:	6d a5       	ldd	r22, Y+45	; 0x2d
    26dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    26de:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e0:	98 a9       	ldd	r25, Y+48	; 0x30
    26e2:	2b ea       	ldi	r18, 0xAB	; 171
    26e4:	3a ea       	ldi	r19, 0xAA	; 170
    26e6:	4a ea       	ldi	r20, 0xAA	; 170
    26e8:	50 e4       	ldi	r21, 0x40	; 64
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	89 a7       	std	Y+41, r24	; 0x29
    26f4:	9a a7       	std	Y+42, r25	; 0x2a
    26f6:	ab a7       	std	Y+43, r26	; 0x2b
    26f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26fa:	69 a5       	ldd	r22, Y+41	; 0x29
    26fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    26fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2700:	9c a5       	ldd	r25, Y+44	; 0x2c
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	1c f4       	brge	.+6      	; 0x2718 <H_LCD_void_latchByte+0x566>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	88 a7       	std	Y+40, r24	; 0x28
    2716:	91 c0       	rjmp	.+290    	; 0x283a <H_LCD_void_latchByte+0x688>
	else if (__tmp > 255)
    2718:	69 a5       	ldd	r22, Y+41	; 0x29
    271a:	7a a5       	ldd	r23, Y+42	; 0x2a
    271c:	8b a5       	ldd	r24, Y+43	; 0x2b
    271e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	53 e4       	ldi	r21, 0x43	; 67
    2728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <H_LCD_void_latchByte+0x580>
    2730:	7b c0       	rjmp	.+246    	; 0x2828 <H_LCD_void_latchByte+0x676>
	{
		_delay_ms(__us / 1000.0);
    2732:	6d a5       	ldd	r22, Y+45	; 0x2d
    2734:	7e a5       	ldd	r23, Y+46	; 0x2e
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	54 e4       	ldi	r21, 0x44	; 68
    2742:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8c a3       	std	Y+36, r24	; 0x24
    274c:	9d a3       	std	Y+37, r25	; 0x25
    274e:	ae a3       	std	Y+38, r26	; 0x26
    2750:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6c a1       	ldd	r22, Y+36	; 0x24
    2754:	7d a1       	ldd	r23, Y+37	; 0x25
    2756:	8e a1       	ldd	r24, Y+38	; 0x26
    2758:	9f a1       	ldd	r25, Y+39	; 0x27
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a e7       	ldi	r20, 0x7A	; 122
    2760:	55 e4       	ldi	r21, 0x45	; 69
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	88 a3       	std	Y+32, r24	; 0x20
    276c:	99 a3       	std	Y+33, r25	; 0x21
    276e:	aa a3       	std	Y+34, r26	; 0x22
    2770:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2772:	68 a1       	ldd	r22, Y+32	; 0x20
    2774:	79 a1       	ldd	r23, Y+33	; 0x21
    2776:	8a a1       	ldd	r24, Y+34	; 0x22
    2778:	9b a1       	ldd	r25, Y+35	; 0x23
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <H_LCD_void_latchByte+0x5e2>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9f 8f       	std	Y+31, r25	; 0x1f
    2790:	8e 8f       	std	Y+30, r24	; 0x1e
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <H_LCD_void_latchByte+0x660>
	else if (__tmp > 65535)
    2794:	68 a1       	ldd	r22, Y+32	; 0x20
    2796:	79 a1       	ldd	r23, Y+33	; 0x21
    2798:	8a a1       	ldd	r24, Y+34	; 0x22
    279a:	9b a1       	ldd	r25, Y+35	; 0x23
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <H_LCD_void_latchByte+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6c a1       	ldd	r22, Y+36	; 0x24
    27ae:	7d a1       	ldd	r23, Y+37	; 0x25
    27b0:	8e a1       	ldd	r24, Y+38	; 0x26
    27b2:	9f a1       	ldd	r25, Y+39	; 0x27
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9f 8f       	std	Y+31, r25	; 0x1f
    27d2:	8e 8f       	std	Y+30, r24	; 0x1e
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <H_LCD_void_latchByte+0x642>
    27d6:	80 e9       	ldi	r24, 0x90	; 144
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	9d 8f       	std	Y+29, r25	; 0x1d
    27dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <H_LCD_void_latchByte+0x630>
    27e6:	9d 8f       	std	Y+29, r25	; 0x1d
    27e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9f 8f       	std	Y+31, r25	; 0x1f
    27f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <H_LCD_void_latchByte+0x624>
    27fc:	24 c0       	rjmp	.+72     	; 0x2846 <H_LCD_void_latchByte+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2800:	79 a1       	ldd	r23, Y+33	; 0x21
    2802:	8a a1       	ldd	r24, Y+34	; 0x22
    2804:	9b a1       	ldd	r25, Y+35	; 0x23
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9f 8f       	std	Y+31, r25	; 0x1f
    2810:	8e 8f       	std	Y+30, r24	; 0x1e
    2812:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2814:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2816:	9b 8f       	std	Y+27, r25	; 0x1b
    2818:	8a 8f       	std	Y+26, r24	; 0x1a
    281a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    281c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <H_LCD_void_latchByte+0x66c>
    2822:	9b 8f       	std	Y+27, r25	; 0x1b
    2824:	8a 8f       	std	Y+26, r24	; 0x1a
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <H_LCD_void_latchByte+0x694>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2828:	69 a5       	ldd	r22, Y+41	; 0x29
    282a:	7a a5       	ldd	r23, Y+42	; 0x2a
    282c:	8b a5       	ldd	r24, Y+43	; 0x2b
    282e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	88 a7       	std	Y+40, r24	; 0x28
    283a:	88 a5       	ldd	r24, Y+40	; 0x28
    283c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    283e:	89 8d       	ldd	r24, Y+25	; 0x19
    2840:	8a 95       	dec	r24
    2842:	f1 f7       	brne	.-4      	; 0x2840 <H_LCD_void_latchByte+0x68e>
    2844:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=1
    2846:	8c e0       	ldi	r24, 0x0C	; 12
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	a8 ec       	ldi	r26, 0xC8	; 200
    2854:	b2 e4       	ldi	r27, 0x42	; 66
    2856:	8d 8b       	std	Y+21, r24	; 0x15
    2858:	9e 8b       	std	Y+22, r25	; 0x16
    285a:	af 8b       	std	Y+23, r26	; 0x17
    285c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    285e:	6d 89       	ldd	r22, Y+21	; 0x15
    2860:	7e 89       	ldd	r23, Y+22	; 0x16
    2862:	8f 89       	ldd	r24, Y+23	; 0x17
    2864:	98 8d       	ldd	r25, Y+24	; 0x18
    2866:	2b ea       	ldi	r18, 0xAB	; 171
    2868:	3a ea       	ldi	r19, 0xAA	; 170
    286a:	4a ea       	ldi	r20, 0xAA	; 170
    286c:	50 e4       	ldi	r21, 0x40	; 64
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	89 8b       	std	Y+17, r24	; 0x11
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	ab 8b       	std	Y+19, r26	; 0x13
    287c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    287e:	69 89       	ldd	r22, Y+17	; 0x11
    2880:	7a 89       	ldd	r23, Y+18	; 0x12
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	1c f4       	brge	.+6      	; 0x289c <H_LCD_void_latchByte+0x6ea>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	88 8b       	std	Y+16, r24	; 0x10
    289a:	91 c0       	rjmp	.+290    	; 0x29be <H_LCD_void_latchByte+0x80c>
	else if (__tmp > 255)
    289c:	69 89       	ldd	r22, Y+17	; 0x11
    289e:	7a 89       	ldd	r23, Y+18	; 0x12
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	53 e4       	ldi	r21, 0x43	; 67
    28ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	0c f0       	brlt	.+2      	; 0x28b6 <H_LCD_void_latchByte+0x704>
    28b4:	7b c0       	rjmp	.+246    	; 0x29ac <H_LCD_void_latchByte+0x7fa>
	{
		_delay_ms(__us / 1000.0);
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4a e7       	ldi	r20, 0x7A	; 122
    28c4:	54 e4       	ldi	r21, 0x44	; 68
    28c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	8c 87       	std	Y+12, r24	; 0x0c
    28d0:	9d 87       	std	Y+13, r25	; 0x0d
    28d2:	ae 87       	std	Y+14, r26	; 0x0e
    28d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    28d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    28da:	8e 85       	ldd	r24, Y+14	; 0x0e
    28dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a e7       	ldi	r20, 0x7A	; 122
    28e4:	55 e4       	ldi	r21, 0x45	; 69
    28e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	88 87       	std	Y+8, r24	; 0x08
    28f0:	99 87       	std	Y+9, r25	; 0x09
    28f2:	aa 87       	std	Y+10, r26	; 0x0a
    28f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28f6:	68 85       	ldd	r22, Y+8	; 0x08
    28f8:	79 85       	ldd	r23, Y+9	; 0x09
    28fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <H_LCD_void_latchByte+0x766>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9f 83       	std	Y+7, r25	; 0x07
    2914:	8e 83       	std	Y+6, r24	; 0x06
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <H_LCD_void_latchByte+0x7e4>
	else if (__tmp > 65535)
    2918:	68 85       	ldd	r22, Y+8	; 0x08
    291a:	79 85       	ldd	r23, Y+9	; 0x09
    291c:	8a 85       	ldd	r24, Y+10	; 0x0a
    291e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <H_LCD_void_latchByte+0x7d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6c 85       	ldd	r22, Y+12	; 0x0c
    2932:	7d 85       	ldd	r23, Y+13	; 0x0d
    2934:	8e 85       	ldd	r24, Y+14	; 0x0e
    2936:	9f 85       	ldd	r25, Y+15	; 0x0f
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9f 83       	std	Y+7, r25	; 0x07
    2956:	8e 83       	std	Y+6, r24	; 0x06
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <H_LCD_void_latchByte+0x7c6>
    295a:	80 e9       	ldi	r24, 0x90	; 144
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	9d 83       	std	Y+5, r25	; 0x05
    2960:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <H_LCD_void_latchByte+0x7b4>
    296a:	9d 83       	std	Y+5, r25	; 0x05
    296c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	8e 81       	ldd	r24, Y+6	; 0x06
    2970:	9f 81       	ldd	r25, Y+7	; 0x07
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9f 83       	std	Y+7, r25	; 0x07
    2976:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	8e 81       	ldd	r24, Y+6	; 0x06
    297a:	9f 81       	ldd	r25, Y+7	; 0x07
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <H_LCD_void_latchByte+0x7a8>
    2980:	24 c0       	rjmp	.+72     	; 0x29ca <H_LCD_void_latchByte+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	68 85       	ldd	r22, Y+8	; 0x08
    2984:	79 85       	ldd	r23, Y+9	; 0x09
    2986:	8a 85       	ldd	r24, Y+10	; 0x0a
    2988:	9b 85       	ldd	r25, Y+11	; 0x0b
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9f 83       	std	Y+7, r25	; 0x07
    2994:	8e 83       	std	Y+6, r24	; 0x06
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	9f 81       	ldd	r25, Y+7	; 0x07
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <H_LCD_void_latchByte+0x7f0>
    29a6:	9b 83       	std	Y+3, r25	; 0x03
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <H_LCD_void_latchByte+0x818>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ac:	69 89       	ldd	r22, Y+17	; 0x11
    29ae:	7a 89       	ldd	r23, Y+18	; 0x12
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	88 8b       	std	Y+16, r24	; 0x10
    29be:	88 89       	ldd	r24, Y+16	; 0x10
    29c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	8a 95       	dec	r24
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <H_LCD_void_latchByte+0x812>
    29c8:	89 83       	std	Y+1, r24	; 0x01

	}
#elif(LCD_MODE == _8_BIT_MODE)

#endif
}
    29ca:	cf 59       	subi	r28, 0x9F	; 159
    29cc:	df 4f       	sbci	r29, 0xFF	; 255
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	08 95       	ret

000029e2 <H_LCD_void_Init>:


void H_LCD_void_Init(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	e0 97       	sbiw	r28, 0x30	; 48
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
	M_Dio_void_setPinValue(LCD_EN_PIN,DIO_LOW);//LCD EN=0
    29f6:	8c e0       	ldi	r24, 0x0C	; 12
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	aa ef       	ldi	r26, 0xFA	; 250
    2a04:	b4 e4       	ldi	r27, 0x44	; 68
    2a06:	8d a7       	std	Y+45, r24	; 0x2d
    2a08:	9e a7       	std	Y+46, r25	; 0x2e
    2a0a:	af a7       	std	Y+47, r26	; 0x2f
    2a0c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a0e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a10:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a14:	98 a9       	ldd	r25, Y+48	; 0x30
    2a16:	2b ea       	ldi	r18, 0xAB	; 171
    2a18:	3a ea       	ldi	r19, 0xAA	; 170
    2a1a:	4a ea       	ldi	r20, 0xAA	; 170
    2a1c:	50 e4       	ldi	r21, 0x40	; 64
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	89 a7       	std	Y+41, r24	; 0x29
    2a28:	9a a7       	std	Y+42, r25	; 0x2a
    2a2a:	ab a7       	std	Y+43, r26	; 0x2b
    2a2c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2a2e:	69 a5       	ldd	r22, Y+41	; 0x29
    2a30:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	1c f4       	brge	.+6      	; 0x2a4c <H_LCD_void_Init+0x6a>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	88 a7       	std	Y+40, r24	; 0x28
    2a4a:	91 c0       	rjmp	.+290    	; 0x2b6e <H_LCD_void_Init+0x18c>
	else if (__tmp > 255)
    2a4c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	53 e4       	ldi	r21, 0x43	; 67
    2a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	0c f0       	brlt	.+2      	; 0x2a66 <H_LCD_void_Init+0x84>
    2a64:	7b c0       	rjmp	.+246    	; 0x2b5c <H_LCD_void_Init+0x17a>
	{
		_delay_ms(__us / 1000.0);
    2a66:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a68:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	4a e7       	ldi	r20, 0x7A	; 122
    2a74:	54 e4       	ldi	r21, 0x44	; 68
    2a76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	8c a3       	std	Y+36, r24	; 0x24
    2a80:	9d a3       	std	Y+37, r25	; 0x25
    2a82:	ae a3       	std	Y+38, r26	; 0x26
    2a84:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a86:	6c a1       	ldd	r22, Y+36	; 0x24
    2a88:	7d a1       	ldd	r23, Y+37	; 0x25
    2a8a:	8e a1       	ldd	r24, Y+38	; 0x26
    2a8c:	9f a1       	ldd	r25, Y+39	; 0x27
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a e7       	ldi	r20, 0x7A	; 122
    2a94:	55 e4       	ldi	r21, 0x45	; 69
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	88 a3       	std	Y+32, r24	; 0x20
    2aa0:	99 a3       	std	Y+33, r25	; 0x21
    2aa2:	aa a3       	std	Y+34, r26	; 0x22
    2aa4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2aa6:	68 a1       	ldd	r22, Y+32	; 0x20
    2aa8:	79 a1       	ldd	r23, Y+33	; 0x21
    2aaa:	8a a1       	ldd	r24, Y+34	; 0x22
    2aac:	9b a1       	ldd	r25, Y+35	; 0x23
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	2c f4       	brge	.+10     	; 0x2ac8 <H_LCD_void_Init+0xe6>
		__ticks = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ac4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ac6:	3f c0       	rjmp	.+126    	; 0x2b46 <H_LCD_void_Init+0x164>
	else if (__tmp > 65535)
    2ac8:	68 a1       	ldd	r22, Y+32	; 0x20
    2aca:	79 a1       	ldd	r23, Y+33	; 0x21
    2acc:	8a a1       	ldd	r24, Y+34	; 0x22
    2ace:	9b a1       	ldd	r25, Y+35	; 0x23
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	3f ef       	ldi	r19, 0xFF	; 255
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	57 e4       	ldi	r21, 0x47	; 71
    2ad8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2adc:	18 16       	cp	r1, r24
    2ade:	4c f5       	brge	.+82     	; 0x2b32 <H_LCD_void_Init+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae0:	6c a1       	ldd	r22, Y+36	; 0x24
    2ae2:	7d a1       	ldd	r23, Y+37	; 0x25
    2ae4:	8e a1       	ldd	r24, Y+38	; 0x26
    2ae6:	9f a1       	ldd	r25, Y+39	; 0x27
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e2       	ldi	r20, 0x20	; 32
    2aee:	51 e4       	ldi	r21, 0x41	; 65
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9f 8f       	std	Y+31, r25	; 0x1f
    2b06:	8e 8f       	std	Y+30, r24	; 0x1e
    2b08:	0f c0       	rjmp	.+30     	; 0x2b28 <H_LCD_void_Init+0x146>
    2b0a:	80 e9       	ldi	r24, 0x90	; 144
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	9d 8f       	std	Y+29, r25	; 0x1d
    2b10:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b14:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <H_LCD_void_Init+0x134>
    2b1a:	9d 8f       	std	Y+29, r25	; 0x1d
    2b1c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	9f 8f       	std	Y+31, r25	; 0x1f
    2b26:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b28:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b2a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	69 f7       	brne	.-38     	; 0x2b0a <H_LCD_void_Init+0x128>
    2b30:	24 c0       	rjmp	.+72     	; 0x2b7a <H_LCD_void_Init+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b32:	68 a1       	ldd	r22, Y+32	; 0x20
    2b34:	79 a1       	ldd	r23, Y+33	; 0x21
    2b36:	8a a1       	ldd	r24, Y+34	; 0x22
    2b38:	9b a1       	ldd	r25, Y+35	; 0x23
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9f 8f       	std	Y+31, r25	; 0x1f
    2b44:	8e 8f       	std	Y+30, r24	; 0x1e
    2b46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b4a:	9b 8f       	std	Y+27, r25	; 0x1b
    2b4c:	8a 8f       	std	Y+26, r24	; 0x1a
    2b4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <H_LCD_void_Init+0x170>
    2b56:	9b 8f       	std	Y+27, r25	; 0x1b
    2b58:	8a 8f       	std	Y+26, r24	; 0x1a
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <H_LCD_void_Init+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b5c:	69 a5       	ldd	r22, Y+41	; 0x29
    2b5e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	88 a7       	std	Y+40, r24	; 0x28
    2b6e:	88 a5       	ldd	r24, Y+40	; 0x28
    2b70:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b72:	89 8d       	ldd	r24, Y+25	; 0x19
    2b74:	8a 95       	dec	r24
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <H_LCD_void_Init+0x192>
    2b78:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2000);

	H_LCD_void_sendCommand(0x33);
    2b7a:	83 e3       	ldi	r24, 0x33	; 51
    2b7c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(FUNCTION_SET);
    2b80:	82 e3       	ldi	r24, 0x32	; 50
    2b82:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(DISPLAY_SETUP);
    2b86:	88 e2       	ldi	r24, 0x28	; 40
    2b88:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(DISPLAY_ON);
    2b8c:	8e e0       	ldi	r24, 0x0E	; 14
    2b8e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(CLEAR_DISPLAY);
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	aa ef       	ldi	r26, 0xFA	; 250
    2b9e:	b4 e4       	ldi	r27, 0x44	; 68
    2ba0:	8d 8b       	std	Y+21, r24	; 0x15
    2ba2:	9e 8b       	std	Y+22, r25	; 0x16
    2ba4:	af 8b       	std	Y+23, r26	; 0x17
    2ba6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	2b ea       	ldi	r18, 0xAB	; 171
    2bb2:	3a ea       	ldi	r19, 0xAA	; 170
    2bb4:	4a ea       	ldi	r20, 0xAA	; 170
    2bb6:	50 e4       	ldi	r21, 0x40	; 64
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	89 8b       	std	Y+17, r24	; 0x11
    2bc2:	9a 8b       	std	Y+18, r25	; 0x12
    2bc4:	ab 8b       	std	Y+19, r26	; 0x13
    2bc6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bc8:	69 89       	ldd	r22, Y+17	; 0x11
    2bca:	7a 89       	ldd	r23, Y+18	; 0x12
    2bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bce:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bdc:	88 23       	and	r24, r24
    2bde:	1c f4       	brge	.+6      	; 0x2be6 <H_LCD_void_Init+0x204>
		__ticks = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	88 8b       	std	Y+16, r24	; 0x10
    2be4:	91 c0       	rjmp	.+290    	; 0x2d08 <H_LCD_void_Init+0x326>
	else if (__tmp > 255)
    2be6:	69 89       	ldd	r22, Y+17	; 0x11
    2be8:	7a 89       	ldd	r23, Y+18	; 0x12
    2bea:	8b 89       	ldd	r24, Y+19	; 0x13
    2bec:	9c 89       	ldd	r25, Y+20	; 0x14
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	53 e4       	ldi	r21, 0x43	; 67
    2bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	0c f0       	brlt	.+2      	; 0x2c00 <H_LCD_void_Init+0x21e>
    2bfe:	7b c0       	rjmp	.+246    	; 0x2cf6 <H_LCD_void_Init+0x314>
	{
		_delay_ms(__us / 1000.0);
    2c00:	6d 89       	ldd	r22, Y+21	; 0x15
    2c02:	7e 89       	ldd	r23, Y+22	; 0x16
    2c04:	8f 89       	ldd	r24, Y+23	; 0x17
    2c06:	98 8d       	ldd	r25, Y+24	; 0x18
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a e7       	ldi	r20, 0x7A	; 122
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8c 87       	std	Y+12, r24	; 0x0c
    2c1a:	9d 87       	std	Y+13, r25	; 0x0d
    2c1c:	ae 87       	std	Y+14, r26	; 0x0e
    2c1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c20:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c22:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c24:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c26:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	4a e7       	ldi	r20, 0x7A	; 122
    2c2e:	55 e4       	ldi	r21, 0x45	; 69
    2c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	88 87       	std	Y+8, r24	; 0x08
    2c3a:	99 87       	std	Y+9, r25	; 0x09
    2c3c:	aa 87       	std	Y+10, r26	; 0x0a
    2c3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c40:	68 85       	ldd	r22, Y+8	; 0x08
    2c42:	79 85       	ldd	r23, Y+9	; 0x09
    2c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e8       	ldi	r20, 0x80	; 128
    2c4e:	5f e3       	ldi	r21, 0x3F	; 63
    2c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c54:	88 23       	and	r24, r24
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <H_LCD_void_Init+0x280>
		__ticks = 1;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9f 83       	std	Y+7, r25	; 0x07
    2c5e:	8e 83       	std	Y+6, r24	; 0x06
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <H_LCD_void_Init+0x2fe>
	else if (__tmp > 65535)
    2c62:	68 85       	ldd	r22, Y+8	; 0x08
    2c64:	79 85       	ldd	r23, Y+9	; 0x09
    2c66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c68:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	3f ef       	ldi	r19, 0xFF	; 255
    2c6e:	4f e7       	ldi	r20, 0x7F	; 127
    2c70:	57 e4       	ldi	r21, 0x47	; 71
    2c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c76:	18 16       	cp	r1, r24
    2c78:	4c f5       	brge	.+82     	; 0x2ccc <H_LCD_void_Init+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c80:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	51 e4       	ldi	r21, 0x41	; 65
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9f 83       	std	Y+7, r25	; 0x07
    2ca0:	8e 83       	std	Y+6, r24	; 0x06
    2ca2:	0f c0       	rjmp	.+30     	; 0x2cc2 <H_LCD_void_Init+0x2e0>
    2ca4:	80 e9       	ldi	r24, 0x90	; 144
    2ca6:	91 e0       	ldi	r25, 0x01	; 1
    2ca8:	9d 83       	std	Y+5, r25	; 0x05
    2caa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <H_LCD_void_Init+0x2ce>
    2cb4:	9d 83       	std	Y+5, r25	; 0x05
    2cb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cba:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	9f 83       	std	Y+7, r25	; 0x07
    2cc0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	69 f7       	brne	.-38     	; 0x2ca4 <H_LCD_void_Init+0x2c2>
    2cca:	24 c0       	rjmp	.+72     	; 0x2d14 <H_LCD_void_Init+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	68 85       	ldd	r22, Y+8	; 0x08
    2cce:	79 85       	ldd	r23, Y+9	; 0x09
    2cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	9f 83       	std	Y+7, r25	; 0x07
    2cde:	8e 83       	std	Y+6, r24	; 0x06
    2ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce4:	9b 83       	std	Y+3, r25	; 0x03
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <H_LCD_void_Init+0x30a>
    2cf0:	9b 83       	std	Y+3, r25	; 0x03
    2cf2:	8a 83       	std	Y+2, r24	; 0x02
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <H_LCD_void_Init+0x332>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cf6:	69 89       	ldd	r22, Y+17	; 0x11
    2cf8:	7a 89       	ldd	r23, Y+18	; 0x12
    2cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	88 8b       	std	Y+16, r24	; 0x10
    2d08:	88 89       	ldd	r24, Y+16	; 0x10
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	8a 95       	dec	r24
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <H_LCD_void_Init+0x32c>
    2d12:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);

	H_LCD_void_sendCommand(CURSOR_RIGHT);
    2d14:	86 e0       	ldi	r24, 0x06	; 6
    2d16:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(CURSOR_OFF);
    2d1a:	8c e0       	ldi	r24, 0x0C	; 12
    2d1c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>

}
    2d20:	e0 96       	adiw	r28, 0x30	; 48
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data )
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	0f 92       	push	r0
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	89 83       	std	Y+1, r24	; 0x01
	//SET RS PIN
	M_Dio_void_setPinValue(LCD_RS_PIN,DIO_HIGH);
    2d3e:	8d e0       	ldi	r24, 0x0D	; 13
    2d40:	61 e0       	ldi	r22, 0x01	; 1
    2d42:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
	H_LCD_void_latchByte(copy_u8data);
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <H_LCD_void_latchByte>

}
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	0f 92       	push	r0
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	//CLEAR RS PIN
	M_Dio_void_setPinValue(LCD_RS_PIN,DIO_LOW);
    2d60:	8d e0       	ldi	r24, 0x0D	; 13
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
	H_LCD_void_latchByte(copy_u8command);
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <H_LCD_void_latchByte>
}
    2d6e:	0f 90       	pop	r0
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <H_LCD_void_sendString>:

void H_LCD_void_sendString(const u8 * pstr)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <H_LCD_void_sendString+0x6>
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	0a c0       	rjmp	.+20     	; 0x2d9a <H_LCD_void_sendString+0x24>

	while(*pstr!='\0')
	{
		H_LCD_void_sendData(*pstr);
    2d86:	e9 81       	ldd	r30, Y+1	; 0x01
    2d88:	fa 81       	ldd	r31, Y+2	; 0x02
    2d8a:	80 81       	ld	r24, Z
    2d8c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <H_LCD_void_sendData>
		pstr++;
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
}

void H_LCD_void_sendString(const u8 * pstr)
{

	while(*pstr!='\0')
    2d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9e:	80 81       	ld	r24, Z
    2da0:	88 23       	and	r24, r24
    2da2:	89 f7       	brne	.-30     	; 0x2d86 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    2dae:	ef 92       	push	r14
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	28 97       	sbiw	r28, 0x08	; 8
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	6d 83       	std	Y+5, r22	; 0x05
    2dcc:	7e 83       	std	Y+6, r23	; 0x06
    2dce:	8f 83       	std	Y+7, r24	; 0x07
    2dd0:	98 87       	std	Y+8, r25	; 0x08

	u32 LOC_u16Reversed = 1;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	a0 e0       	ldi	r26, 0x00	; 0
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	89 83       	std	Y+1, r24	; 0x01
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	ab 83       	std	Y+3, r26	; 0x03
    2de0:	bc 83       	std	Y+4, r27	; 0x04
	if (copy_s32Num == 0) {
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	af 81       	ldd	r26, Y+7	; 0x07
    2de8:	b8 85       	ldd	r27, Y+8	; 0x08
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	a1 05       	cpc	r26, r1
    2dee:	b1 05       	cpc	r27, r1
    2df0:	d1 f5       	brne	.+116    	; 0x2e66 <H_LCD_void_sendIntNum+0xb8>
		H_LCD_void_sendData('0');
    2df2:	80 e3       	ldi	r24, 0x30	; 48
    2df4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <H_LCD_void_sendData>
    2df8:	6b c0       	rjmp	.+214    	; 0x2ed0 <H_LCD_void_sendIntNum+0x122>
	} else {
		while (copy_s32Num != 0) {
			LOC_u16Reversed = (LOC_u16Reversed * 10) + (copy_s32Num % 10);
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	ab 81       	ldd	r26, Y+3	; 0x03
    2e00:	bc 81       	ldd	r27, Y+4	; 0x04
    2e02:	2a e0       	ldi	r18, 0x0A	; 10
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 ca 19 	call	0x3394	; 0x3394 <__mulsi3>
    2e12:	7b 01       	movw	r14, r22
    2e14:	8c 01       	movw	r16, r24
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	af 81       	ldd	r26, Y+7	; 0x07
    2e1c:	b8 85       	ldd	r27, Y+8	; 0x08
    2e1e:	2a e0       	ldi	r18, 0x0A	; 10
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	50 e0       	ldi	r21, 0x00	; 0
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__divmodsi4>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	8e 0d       	add	r24, r14
    2e34:	9f 1d       	adc	r25, r15
    2e36:	a0 1f       	adc	r26, r16
    2e38:	b1 1f       	adc	r27, r17
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	ab 83       	std	Y+3, r26	; 0x03
    2e40:	bc 83       	std	Y+4, r27	; 0x04
			copy_s32Num /= 10;
    2e42:	8d 81       	ldd	r24, Y+5	; 0x05
    2e44:	9e 81       	ldd	r25, Y+6	; 0x06
    2e46:	af 81       	ldd	r26, Y+7	; 0x07
    2e48:	b8 85       	ldd	r27, Y+8	; 0x08
    2e4a:	2a e0       	ldi	r18, 0x0A	; 10
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__divmodsi4>
    2e5a:	da 01       	movw	r26, r20
    2e5c:	c9 01       	movw	r24, r18
    2e5e:	8d 83       	std	Y+5, r24	; 0x05
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	af 83       	std	Y+7, r26	; 0x07
    2e64:	b8 87       	std	Y+8, r27	; 0x08

	u32 LOC_u16Reversed = 1;
	if (copy_s32Num == 0) {
		H_LCD_void_sendData('0');
	} else {
		while (copy_s32Num != 0) {
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	af 81       	ldd	r26, Y+7	; 0x07
    2e6c:	b8 85       	ldd	r27, Y+8	; 0x08
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	a1 05       	cpc	r26, r1
    2e72:	b1 05       	cpc	r27, r1
    2e74:	11 f6       	brne	.-124    	; 0x2dfa <H_LCD_void_sendIntNum+0x4c>
    2e76:	23 c0       	rjmp	.+70     	; 0x2ebe <H_LCD_void_sendIntNum+0x110>
			LOC_u16Reversed = (LOC_u16Reversed * 10) + (copy_s32Num % 10);
			copy_s32Num /= 10;
		}
		while (LOC_u16Reversed != 1) {
			H_LCD_void_sendData(LOC_u16Reversed % 10 + '0');
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2e80:	2a e0       	ldi	r18, 0x0A	; 10
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodsi4>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	80 5d       	subi	r24, 0xD0	; 208
    2e96:	0e 94 99 16 	call	0x2d32	; 0x2d32 <H_LCD_void_sendData>
			LOC_u16Reversed /= 10;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2ea0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ea2:	2a e0       	ldi	r18, 0x0A	; 10
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodsi4>
    2eb2:	da 01       	movw	r26, r20
    2eb4:	c9 01       	movw	r24, r18
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	ab 83       	std	Y+3, r26	; 0x03
    2ebc:	bc 83       	std	Y+4, r27	; 0x04
	} else {
		while (copy_s32Num != 0) {
			LOC_u16Reversed = (LOC_u16Reversed * 10) + (copy_s32Num % 10);
			copy_s32Num /= 10;
		}
		while (LOC_u16Reversed != 1) {
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ec4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	91 05       	cpc	r25, r1
    2eca:	a1 05       	cpc	r26, r1
    2ecc:	b1 05       	cpc	r27, r1
    2ece:	a1 f6       	brne	.-88     	; 0x2e78 <H_LCD_void_sendIntNum+0xca>
//		H_LCD_void_sendData('-');
//		copy_s32Num *= (-1);
//	}
//	ltoa(copy_s32Num,s,10);
//	H_LCD_void_sendString(s);
}
    2ed0:	28 96       	adiw	r28, 0x08	; 8
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	ff 90       	pop	r15
    2ee6:	ef 90       	pop	r14
    2ee8:	08 95       	ret

00002eea <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	6e 97       	sbiw	r28, 0x1e	; 30
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	8d 8f       	std	Y+29, r24	; 0x1d
    2f00:	6e 8f       	std	Y+30, r22	; 0x1e
	u8 firstCharAdr[]={0x80,0xC0,0x94,0xD4};
    2f02:	80 e8       	ldi	r24, 0x80	; 128
    2f04:	89 8f       	std	Y+25, r24	; 0x19
    2f06:	80 ec       	ldi	r24, 0xC0	; 192
    2f08:	8a 8f       	std	Y+26, r24	; 0x1a
    2f0a:	84 e9       	ldi	r24, 0x94	; 148
    2f0c:	8b 8f       	std	Y+27, r24	; 0x1b
    2f0e:	84 ed       	ldi	r24, 0xD4	; 212
    2f10:	8c 8f       	std	Y+28, r24	; 0x1c
	H_LCD_void_sendCommand(firstCharAdr[copy_u8Col-1]+copy_u8Row-1);
    2f12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	9c 01       	movw	r18, r24
    2f1a:	21 50       	subi	r18, 0x01	; 1
    2f1c:	30 40       	sbci	r19, 0x00	; 0
    2f1e:	ce 01       	movw	r24, r28
    2f20:	49 96       	adiw	r24, 0x19	; 25
    2f22:	fc 01       	movw	r30, r24
    2f24:	e2 0f       	add	r30, r18
    2f26:	f3 1f       	adc	r31, r19
    2f28:	90 81       	ld	r25, Z
    2f2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2c:	89 0f       	add	r24, r25
    2f2e:	81 50       	subi	r24, 0x01	; 1
    2f30:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendCommand>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a8 ec       	ldi	r26, 0xC8	; 200
    2f3a:	b2 e4       	ldi	r27, 0x42	; 66
    2f3c:	8d 8b       	std	Y+21, r24	; 0x15
    2f3e:	9e 8b       	std	Y+22, r25	; 0x16
    2f40:	af 8b       	std	Y+23, r26	; 0x17
    2f42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f44:	6d 89       	ldd	r22, Y+21	; 0x15
    2f46:	7e 89       	ldd	r23, Y+22	; 0x16
    2f48:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4c:	2b ea       	ldi	r18, 0xAB	; 171
    2f4e:	3a ea       	ldi	r19, 0xAA	; 170
    2f50:	4a ea       	ldi	r20, 0xAA	; 170
    2f52:	50 e4       	ldi	r21, 0x40	; 64
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	89 8b       	std	Y+17, r24	; 0x11
    2f5e:	9a 8b       	std	Y+18, r25	; 0x12
    2f60:	ab 8b       	std	Y+19, r26	; 0x13
    2f62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f64:	69 89       	ldd	r22, Y+17	; 0x11
    2f66:	7a 89       	ldd	r23, Y+18	; 0x12
    2f68:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	1c f4       	brge	.+6      	; 0x2f82 <H_LCD_void_gotoXY+0x98>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	88 8b       	std	Y+16, r24	; 0x10
    2f80:	91 c0       	rjmp	.+290    	; 0x30a4 <H_LCD_void_gotoXY+0x1ba>
	else if (__tmp > 255)
    2f82:	69 89       	ldd	r22, Y+17	; 0x11
    2f84:	7a 89       	ldd	r23, Y+18	; 0x12
    2f86:	8b 89       	ldd	r24, Y+19	; 0x13
    2f88:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	53 e4       	ldi	r21, 0x43	; 67
    2f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	0c f0       	brlt	.+2      	; 0x2f9c <H_LCD_void_gotoXY+0xb2>
    2f9a:	7b c0       	rjmp	.+246    	; 0x3092 <H_LCD_void_gotoXY+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    2f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	4a e7       	ldi	r20, 0x7A	; 122
    2faa:	54 e4       	ldi	r21, 0x44	; 68
    2fac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	8c 87       	std	Y+12, r24	; 0x0c
    2fb6:	9d 87       	std	Y+13, r25	; 0x0d
    2fb8:	ae 87       	std	Y+14, r26	; 0x0e
    2fba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a e7       	ldi	r20, 0x7A	; 122
    2fca:	55 e4       	ldi	r21, 0x45	; 69
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	88 87       	std	Y+8, r24	; 0x08
    2fd6:	99 87       	std	Y+9, r25	; 0x09
    2fd8:	aa 87       	std	Y+10, r26	; 0x0a
    2fda:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fdc:	68 85       	ldd	r22, Y+8	; 0x08
    2fde:	79 85       	ldd	r23, Y+9	; 0x09
    2fe0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fe2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <H_LCD_void_gotoXY+0x114>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9f 83       	std	Y+7, r25	; 0x07
    2ffa:	8e 83       	std	Y+6, r24	; 0x06
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <H_LCD_void_gotoXY+0x192>
	else if (__tmp > 65535)
    2ffe:	68 85       	ldd	r22, Y+8	; 0x08
    3000:	79 85       	ldd	r23, Y+9	; 0x09
    3002:	8a 85       	ldd	r24, Y+10	; 0x0a
    3004:	9b 85       	ldd	r25, Y+11	; 0x0b
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	4c f5       	brge	.+82     	; 0x3068 <H_LCD_void_gotoXY+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3016:	6c 85       	ldd	r22, Y+12	; 0x0c
    3018:	7d 85       	ldd	r23, Y+13	; 0x0d
    301a:	8e 85       	ldd	r24, Y+14	; 0x0e
    301c:	9f 85       	ldd	r25, Y+15	; 0x0f
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9f 83       	std	Y+7, r25	; 0x07
    303c:	8e 83       	std	Y+6, r24	; 0x06
    303e:	0f c0       	rjmp	.+30     	; 0x305e <H_LCD_void_gotoXY+0x174>
    3040:	80 e9       	ldi	r24, 0x90	; 144
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	9d 83       	std	Y+5, r25	; 0x05
    3046:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3048:	8c 81       	ldd	r24, Y+4	; 0x04
    304a:	9d 81       	ldd	r25, Y+5	; 0x05
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <H_LCD_void_gotoXY+0x162>
    3050:	9d 83       	std	Y+5, r25	; 0x05
    3052:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	8e 81       	ldd	r24, Y+6	; 0x06
    3056:	9f 81       	ldd	r25, Y+7	; 0x07
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9f 83       	std	Y+7, r25	; 0x07
    305c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305e:	8e 81       	ldd	r24, Y+6	; 0x06
    3060:	9f 81       	ldd	r25, Y+7	; 0x07
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	69 f7       	brne	.-38     	; 0x3040 <H_LCD_void_gotoXY+0x156>
    3066:	24 c0       	rjmp	.+72     	; 0x30b0 <H_LCD_void_gotoXY+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	68 85       	ldd	r22, Y+8	; 0x08
    306a:	79 85       	ldd	r23, Y+9	; 0x09
    306c:	8a 85       	ldd	r24, Y+10	; 0x0a
    306e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9f 83       	std	Y+7, r25	; 0x07
    307a:	8e 83       	std	Y+6, r24	; 0x06
    307c:	8e 81       	ldd	r24, Y+6	; 0x06
    307e:	9f 81       	ldd	r25, Y+7	; 0x07
    3080:	9b 83       	std	Y+3, r25	; 0x03
    3082:	8a 83       	std	Y+2, r24	; 0x02
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	9b 81       	ldd	r25, Y+3	; 0x03
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <H_LCD_void_gotoXY+0x19e>
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	0f c0       	rjmp	.+30     	; 0x30b0 <H_LCD_void_gotoXY+0x1c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3092:	69 89       	ldd	r22, Y+17	; 0x11
    3094:	7a 89       	ldd	r23, Y+18	; 0x12
    3096:	8b 89       	ldd	r24, Y+19	; 0x13
    3098:	9c 89       	ldd	r25, Y+20	; 0x14
    309a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	88 8b       	std	Y+16, r24	; 0x10
    30a4:	88 89       	ldd	r24, Y+16	; 0x10
    30a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	8a 95       	dec	r24
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <H_LCD_void_gotoXY+0x1c0>
    30ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    30b0:	6e 96       	adiw	r28, 0x1e	; 30
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <L298N_Init>:

#include "TIMER0_int.h"


void L298N_Init(u8 DIR,u8 EN)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	00 d0       	rcall	.+0      	; 0x30c8 <L298N_Init+0x6>
    30c8:	00 d0       	rcall	.+0      	; 0x30ca <L298N_Init+0x8>
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <L298N_Init+0xa>
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	6a 83       	std	Y+2, r22	; 0x02
	switch(DIR)
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	3e 83       	std	Y+6, r19	; 0x06
    30dc:	2d 83       	std	Y+5, r18	; 0x05
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	31 f0       	breq	.+12     	; 0x30f2 <L298N_Init+0x30>
    30e6:	2d 81       	ldd	r18, Y+5	; 0x05
    30e8:	3e 81       	ldd	r19, Y+6	; 0x06
    30ea:	21 30       	cpi	r18, 0x01	; 1
    30ec:	31 05       	cpc	r19, r1
    30ee:	31 f0       	breq	.+12     	; 0x30fc <L298N_Init+0x3a>
    30f0:	09 c0       	rjmp	.+18     	; 0x3104 <L298N_Init+0x42>
	{
	case L298N_FORWARD: M_Dio_void_setPinValue(L298N_DIR, DIO_HIGH);break;
    30f2:	89 e1       	ldi	r24, 0x19	; 25
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <L298N_Init+0x42>
	case L298N_REVERSE: M_Dio_void_setPinValue(L298N_DIR, DIO_LOW);break;
    30fc:	89 e1       	ldi	r24, 0x19	; 25
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
	}

	switch(EN)
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	3c 83       	std	Y+4, r19	; 0x04
    310c:	2b 83       	std	Y+3, r18	; 0x03
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	9c 81       	ldd	r25, Y+4	; 0x04
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	31 f0       	breq	.+12     	; 0x3122 <L298N_Init+0x60>
    3116:	2b 81       	ldd	r18, Y+3	; 0x03
    3118:	3c 81       	ldd	r19, Y+4	; 0x04
    311a:	21 30       	cpi	r18, 0x01	; 1
    311c:	31 05       	cpc	r19, r1
    311e:	31 f0       	breq	.+12     	; 0x312c <L298N_Init+0x6a>
    3120:	09 c0       	rjmp	.+18     	; 0x3134 <L298N_Init+0x72>
	{
	case L298N_DISABLE: M_Dio_void_setPinValue(L298N_EN, DIO_LOW);break;
    3122:	8a e1       	ldi	r24, 0x1A	; 26
    3124:	60 e0       	ldi	r22, 0x00	; 0
    3126:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
    312a:	04 c0       	rjmp	.+8      	; 0x3134 <L298N_Init+0x72>
	case L298N_ENABLE: M_Dio_void_setPinValue(L298N_EN, DIO_HIGH);break;
    312c:	8a e1       	ldi	r24, 0x1A	; 26
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <M_Dio_void_setPinValue>
	}

}
    3134:	26 96       	adiw	r28, 0x06	; 6
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <L298N_Start>:


void L298N_Start(u8 freq,u8 duty)
{
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	00 d0       	rcall	.+0      	; 0x314c <L298N_Start+0x6>
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	6a 83       	std	Y+2, r22	; 0x02
	M_TIMER0_void_setphaseCorrectPWM(freq,duty);
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	6a 81       	ldd	r22, Y+2	; 0x02
    3158:	0e 94 31 09 	call	0x1262	; 0x1262 <M_TIMER0_void_setphaseCorrectPWM>

}
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <main>:
extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];
extern const TIMER0_SETTINGS_CONFIG TIMER0_SETTINGS_PARAMETERS;
const ADC_CONFIG ADC_SETTINGS;

int main()
{
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	2e 97       	sbiw	r28, 0x0e	; 14
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61

/**********************************INTIALIZATION****************************************/
	Port_Init(PORT_Config_Arr);
    317a:	8a e8       	ldi	r24, 0x8A	; 138
    317c:	91 e0       	ldi	r25, 0x01	; 1
    317e:	0e 94 41 0a 	call	0x1482	; 0x1482 <Port_Init>
	M_TIMER0_void_Timer_Init(&TIMER0_SETTINGS_PARAMETERS);
    3182:	8a ef       	ldi	r24, 0xFA	; 250
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	0e 94 75 07 	call	0xeea	; 0xeea <M_TIMER0_void_Timer_Init>
	M_ADC_void_Init(&ADC_SETTINGS);
    318a:	87 e8       	ldi	r24, 0x87	; 135
    318c:	91 e0       	ldi	r25, 0x01	; 1
    318e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <M_ADC_void_Init>
	L298N_Init(L298N_FORWARD,L298N_ENABLE);
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	61 e0       	ldi	r22, 0x01	; 1
    3196:	0e 94 61 18 	call	0x30c2	; 0x30c2 <L298N_Init>
	H_LCD_void_Init();
    319a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <H_LCD_void_Init>
/*************************************************************************************/


	M_ADC_void_EnableInt();
    319e:	0e 94 29 10 	call	0x2052	; 0x2052 <M_ADC_void_EnableInt>
	M_GID_void_Enable();
    31a2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <M_GID_void_Enable>


	H_LCD_void_gotoXY(1, 1);
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	61 e0       	ldi	r22, 0x01	; 1
    31aa:	0e 94 75 17 	call	0x2eea	; 0x2eea <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Temperature: ");
    31ae:	80 e6       	ldi	r24, 0x60	; 96
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <H_LCD_void_sendString>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	aa ef       	ldi	r26, 0xFA	; 250
    31bc:	b3 e4       	ldi	r27, 0x43	; 67
    31be:	8b 87       	std	Y+11, r24	; 0x0b
    31c0:	9c 87       	std	Y+12, r25	; 0x0c
    31c2:	ad 87       	std	Y+13, r26	; 0x0d
    31c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    31cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	4a e7       	ldi	r20, 0x7A	; 122
    31d4:	55 e4       	ldi	r21, 0x45	; 69
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	8f 83       	std	Y+7, r24	; 0x07
    31e0:	98 87       	std	Y+8, r25	; 0x08
    31e2:	a9 87       	std	Y+9, r26	; 0x09
    31e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31e6:	6f 81       	ldd	r22, Y+7	; 0x07
    31e8:	78 85       	ldd	r23, Y+8	; 0x08
    31ea:	89 85       	ldd	r24, Y+9	; 0x09
    31ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e8       	ldi	r20, 0x80	; 128
    31f4:	5f e3       	ldi	r21, 0x3F	; 63
    31f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31fa:	88 23       	and	r24, r24
    31fc:	2c f4       	brge	.+10     	; 0x3208 <main+0xa2>
		__ticks = 1;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
    3206:	3f c0       	rjmp	.+126    	; 0x3286 <main+0x120>
	else if (__tmp > 65535)
    3208:	6f 81       	ldd	r22, Y+7	; 0x07
    320a:	78 85       	ldd	r23, Y+8	; 0x08
    320c:	89 85       	ldd	r24, Y+9	; 0x09
    320e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	3f ef       	ldi	r19, 0xFF	; 255
    3214:	4f e7       	ldi	r20, 0x7F	; 127
    3216:	57 e4       	ldi	r21, 0x47	; 71
    3218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    321c:	18 16       	cp	r1, r24
    321e:	4c f5       	brge	.+82     	; 0x3272 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3220:	6b 85       	ldd	r22, Y+11	; 0x0b
    3222:	7c 85       	ldd	r23, Y+12	; 0x0c
    3224:	8d 85       	ldd	r24, Y+13	; 0x0d
    3226:	9e 85       	ldd	r25, Y+14	; 0x0e
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9e 83       	std	Y+6, r25	; 0x06
    3246:	8d 83       	std	Y+5, r24	; 0x05
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <main+0x102>
    324a:	80 e9       	ldi	r24, 0x90	; 144
    324c:	91 e0       	ldi	r25, 0x01	; 1
    324e:	9c 83       	std	Y+4, r25	; 0x04
    3250:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <main+0xf0>
    325a:	9c 83       	std	Y+4, r25	; 0x04
    325c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	8d 81       	ldd	r24, Y+5	; 0x05
    3260:	9e 81       	ldd	r25, Y+6	; 0x06
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	9e 83       	std	Y+6, r25	; 0x06
    3266:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	8d 81       	ldd	r24, Y+5	; 0x05
    326a:	9e 81       	ldd	r25, Y+6	; 0x06
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <main+0xe4>
    3270:	14 c0       	rjmp	.+40     	; 0x329a <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	6f 81       	ldd	r22, Y+7	; 0x07
    3274:	78 85       	ldd	r23, Y+8	; 0x08
    3276:	89 85       	ldd	r24, Y+9	; 0x09
    3278:	9a 85       	ldd	r25, Y+10	; 0x0a
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
    3286:	8d 81       	ldd	r24, Y+5	; 0x05
    3288:	9e 81       	ldd	r25, Y+6	; 0x06
    328a:	9a 83       	std	Y+2, r25	; 0x02
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <main+0x12c>
    3296:	9a 83       	std	Y+2, r25	; 0x02
    3298:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	while(1)
	{
		M_ADC_getDigitalValueAsynchCallBack(1,ADC_INT);
    329a:	2c eb       	ldi	r18, 0xBC	; 188
    329c:	39 e1       	ldi	r19, 0x19	; 25
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	b9 01       	movw	r22, r18
    32a2:	0e 94 37 10 	call	0x206e	; 0x206e <M_ADC_getDigitalValueAsynchCallBack>
		H_LCD_void_gotoXY(1, 2);
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	62 e0       	ldi	r22, 0x02	; 2
    32aa:	0e 94 75 17 	call	0x2eea	; 0x2eea <H_LCD_void_gotoXY>
		H_LCD_void_sendIntNum(LM35_value);
    32ae:	80 91 12 02 	lds	r24, 0x0212
    32b2:	90 91 13 02 	lds	r25, 0x0213
    32b6:	cc 01       	movw	r24, r24
    32b8:	a0 e0       	ldi	r26, 0x00	; 0
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 d7 16 	call	0x2dae	; 0x2dae <H_LCD_void_sendIntNum>
		H_LCD_void_gotoXY(1, 3);
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	63 e0       	ldi	r22, 0x03	; 3
    32c8:	0e 94 75 17 	call	0x2eea	; 0x2eea <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Duty: ");
    32cc:	8e e6       	ldi	r24, 0x6E	; 110
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <H_LCD_void_sendString>

		if(LM35_value<=25)
    32d4:	80 91 12 02 	lds	r24, 0x0212
    32d8:	90 91 13 02 	lds	r25, 0x0213
    32dc:	8a 31       	cpi	r24, 0x1A	; 26
    32de:	91 05       	cpc	r25, r1
    32e0:	78 f4       	brcc	.+30     	; 0x3300 <main+0x19a>
		{
			L298N_Init(L298N_FORWARD,L298N_DISABLE);
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	0e 94 61 18 	call	0x30c2	; 0x30c2 <L298N_Init>
			H_LCD_void_gotoXY(1, 4);
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	64 e0       	ldi	r22, 0x04	; 4
    32ee:	0e 94 75 17 	call	0x2eea	; 0x2eea <H_LCD_void_gotoXY>
			H_LCD_void_sendIntNum(0);
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 d7 16 	call	0x2dae	; 0x2dae <H_LCD_void_sendIntNum>
    32fe:	cd cf       	rjmp	.-102    	; 0x329a <main+0x134>

		}
		else if(LM35_value>25 && LM35_value<=35)
    3300:	80 91 12 02 	lds	r24, 0x0212
    3304:	90 91 13 02 	lds	r25, 0x0213
    3308:	8a 31       	cpi	r24, 0x1A	; 26
    330a:	91 05       	cpc	r25, r1
    330c:	d0 f0       	brcs	.+52     	; 0x3342 <main+0x1dc>
    330e:	80 91 12 02 	lds	r24, 0x0212
    3312:	90 91 13 02 	lds	r25, 0x0213
    3316:	84 32       	cpi	r24, 0x24	; 36
    3318:	91 05       	cpc	r25, r1
    331a:	98 f4       	brcc	.+38     	; 0x3342 <main+0x1dc>
		{
			L298N_Init(L298N_FORWARD,L298N_ENABLE);
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	61 e0       	ldi	r22, 0x01	; 1
    3320:	0e 94 61 18 	call	0x30c2	; 0x30c2 <L298N_Init>
			L298N_Start(5,50);
    3324:	85 e0       	ldi	r24, 0x05	; 5
    3326:	62 e3       	ldi	r22, 0x32	; 50
    3328:	0e 94 a3 18 	call	0x3146	; 0x3146 <L298N_Start>
			H_LCD_void_gotoXY(1, 4);
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	64 e0       	ldi	r22, 0x04	; 4
    3330:	0e 94 75 17 	call	0x2eea	; 0x2eea <H_LCD_void_gotoXY>
			H_LCD_void_sendIntNum(50);
    3334:	62 e3       	ldi	r22, 0x32	; 50
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 d7 16 	call	0x2dae	; 0x2dae <H_LCD_void_sendIntNum>
    3340:	ac cf       	rjmp	.-168    	; 0x329a <main+0x134>
		}
		else if(LM35_value>35)
    3342:	80 91 12 02 	lds	r24, 0x0212
    3346:	90 91 13 02 	lds	r25, 0x0213
    334a:	84 32       	cpi	r24, 0x24	; 36
    334c:	91 05       	cpc	r25, r1
    334e:	08 f4       	brcc	.+2      	; 0x3352 <main+0x1ec>
    3350:	a4 cf       	rjmp	.-184    	; 0x329a <main+0x134>
		{
			L298N_Init(L298N_FORWARD,L298N_ENABLE);
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	0e 94 61 18 	call	0x30c2	; 0x30c2 <L298N_Init>
			L298N_Start(5,80);
    335a:	85 e0       	ldi	r24, 0x05	; 5
    335c:	60 e5       	ldi	r22, 0x50	; 80
    335e:	0e 94 a3 18 	call	0x3146	; 0x3146 <L298N_Start>
			H_LCD_void_gotoXY(1, 4);
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	64 e0       	ldi	r22, 0x04	; 4
    3366:	0e 94 75 17 	call	0x2eea	; 0x2eea <H_LCD_void_gotoXY>
			H_LCD_void_sendIntNum(80);
    336a:	60 e5       	ldi	r22, 0x50	; 80
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 d7 16 	call	0x2dae	; 0x2dae <H_LCD_void_sendIntNum>
    3376:	91 cf       	rjmp	.-222    	; 0x329a <main+0x134>

00003378 <ADC_INT>:
	}
	return 0;
}

void ADC_INT(void)
{
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
	LM35_value=H_LM35_Calculate_Data(1);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	0e 94 96 10 	call	0x212c	; 0x212c <H_LM35_Calculate_Data>
    3386:	90 93 13 02 	sts	0x0213, r25
    338a:	80 93 12 02 	sts	0x0212, r24
}
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <__mulsi3>:
    3394:	62 9f       	mul	r22, r18
    3396:	d0 01       	movw	r26, r0
    3398:	73 9f       	mul	r23, r19
    339a:	f0 01       	movw	r30, r0
    339c:	82 9f       	mul	r24, r18
    339e:	e0 0d       	add	r30, r0
    33a0:	f1 1d       	adc	r31, r1
    33a2:	64 9f       	mul	r22, r20
    33a4:	e0 0d       	add	r30, r0
    33a6:	f1 1d       	adc	r31, r1
    33a8:	92 9f       	mul	r25, r18
    33aa:	f0 0d       	add	r31, r0
    33ac:	83 9f       	mul	r24, r19
    33ae:	f0 0d       	add	r31, r0
    33b0:	74 9f       	mul	r23, r20
    33b2:	f0 0d       	add	r31, r0
    33b4:	65 9f       	mul	r22, r21
    33b6:	f0 0d       	add	r31, r0
    33b8:	99 27       	eor	r25, r25
    33ba:	72 9f       	mul	r23, r18
    33bc:	b0 0d       	add	r27, r0
    33be:	e1 1d       	adc	r30, r1
    33c0:	f9 1f       	adc	r31, r25
    33c2:	63 9f       	mul	r22, r19
    33c4:	b0 0d       	add	r27, r0
    33c6:	e1 1d       	adc	r30, r1
    33c8:	f9 1f       	adc	r31, r25
    33ca:	bd 01       	movw	r22, r26
    33cc:	cf 01       	movw	r24, r30
    33ce:	11 24       	eor	r1, r1
    33d0:	08 95       	ret

000033d2 <__udivmodqi4>:
    33d2:	99 1b       	sub	r25, r25
    33d4:	79 e0       	ldi	r23, 0x09	; 9
    33d6:	04 c0       	rjmp	.+8      	; 0x33e0 <__udivmodqi4_ep>

000033d8 <__udivmodqi4_loop>:
    33d8:	99 1f       	adc	r25, r25
    33da:	96 17       	cp	r25, r22
    33dc:	08 f0       	brcs	.+2      	; 0x33e0 <__udivmodqi4_ep>
    33de:	96 1b       	sub	r25, r22

000033e0 <__udivmodqi4_ep>:
    33e0:	88 1f       	adc	r24, r24
    33e2:	7a 95       	dec	r23
    33e4:	c9 f7       	brne	.-14     	; 0x33d8 <__udivmodqi4_loop>
    33e6:	80 95       	com	r24
    33e8:	08 95       	ret

000033ea <__udivmodhi4>:
    33ea:	aa 1b       	sub	r26, r26
    33ec:	bb 1b       	sub	r27, r27
    33ee:	51 e1       	ldi	r21, 0x11	; 17
    33f0:	07 c0       	rjmp	.+14     	; 0x3400 <__udivmodhi4_ep>

000033f2 <__udivmodhi4_loop>:
    33f2:	aa 1f       	adc	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	a6 17       	cp	r26, r22
    33f8:	b7 07       	cpc	r27, r23
    33fa:	10 f0       	brcs	.+4      	; 0x3400 <__udivmodhi4_ep>
    33fc:	a6 1b       	sub	r26, r22
    33fe:	b7 0b       	sbc	r27, r23

00003400 <__udivmodhi4_ep>:
    3400:	88 1f       	adc	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	5a 95       	dec	r21
    3406:	a9 f7       	brne	.-22     	; 0x33f2 <__udivmodhi4_loop>
    3408:	80 95       	com	r24
    340a:	90 95       	com	r25
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	08 95       	ret

00003412 <__udivmodsi4>:
    3412:	a1 e2       	ldi	r26, 0x21	; 33
    3414:	1a 2e       	mov	r1, r26
    3416:	aa 1b       	sub	r26, r26
    3418:	bb 1b       	sub	r27, r27
    341a:	fd 01       	movw	r30, r26
    341c:	0d c0       	rjmp	.+26     	; 0x3438 <__udivmodsi4_ep>

0000341e <__udivmodsi4_loop>:
    341e:	aa 1f       	adc	r26, r26
    3420:	bb 1f       	adc	r27, r27
    3422:	ee 1f       	adc	r30, r30
    3424:	ff 1f       	adc	r31, r31
    3426:	a2 17       	cp	r26, r18
    3428:	b3 07       	cpc	r27, r19
    342a:	e4 07       	cpc	r30, r20
    342c:	f5 07       	cpc	r31, r21
    342e:	20 f0       	brcs	.+8      	; 0x3438 <__udivmodsi4_ep>
    3430:	a2 1b       	sub	r26, r18
    3432:	b3 0b       	sbc	r27, r19
    3434:	e4 0b       	sbc	r30, r20
    3436:	f5 0b       	sbc	r31, r21

00003438 <__udivmodsi4_ep>:
    3438:	66 1f       	adc	r22, r22
    343a:	77 1f       	adc	r23, r23
    343c:	88 1f       	adc	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	1a 94       	dec	r1
    3442:	69 f7       	brne	.-38     	; 0x341e <__udivmodsi4_loop>
    3444:	60 95       	com	r22
    3446:	70 95       	com	r23
    3448:	80 95       	com	r24
    344a:	90 95       	com	r25
    344c:	9b 01       	movw	r18, r22
    344e:	ac 01       	movw	r20, r24
    3450:	bd 01       	movw	r22, r26
    3452:	cf 01       	movw	r24, r30
    3454:	08 95       	ret

00003456 <__divmodsi4>:
    3456:	97 fb       	bst	r25, 7
    3458:	09 2e       	mov	r0, r25
    345a:	05 26       	eor	r0, r21
    345c:	0e d0       	rcall	.+28     	; 0x347a <__divmodsi4_neg1>
    345e:	57 fd       	sbrc	r21, 7
    3460:	04 d0       	rcall	.+8      	; 0x346a <__divmodsi4_neg2>
    3462:	d7 df       	rcall	.-82     	; 0x3412 <__udivmodsi4>
    3464:	0a d0       	rcall	.+20     	; 0x347a <__divmodsi4_neg1>
    3466:	00 1c       	adc	r0, r0
    3468:	38 f4       	brcc	.+14     	; 0x3478 <__divmodsi4_exit>

0000346a <__divmodsi4_neg2>:
    346a:	50 95       	com	r21
    346c:	40 95       	com	r20
    346e:	30 95       	com	r19
    3470:	21 95       	neg	r18
    3472:	3f 4f       	sbci	r19, 0xFF	; 255
    3474:	4f 4f       	sbci	r20, 0xFF	; 255
    3476:	5f 4f       	sbci	r21, 0xFF	; 255

00003478 <__divmodsi4_exit>:
    3478:	08 95       	ret

0000347a <__divmodsi4_neg1>:
    347a:	f6 f7       	brtc	.-4      	; 0x3478 <__divmodsi4_exit>
    347c:	90 95       	com	r25
    347e:	80 95       	com	r24
    3480:	70 95       	com	r23
    3482:	61 95       	neg	r22
    3484:	7f 4f       	sbci	r23, 0xFF	; 255
    3486:	8f 4f       	sbci	r24, 0xFF	; 255
    3488:	9f 4f       	sbci	r25, 0xFF	; 255
    348a:	08 95       	ret

0000348c <__prologue_saves__>:
    348c:	2f 92       	push	r2
    348e:	3f 92       	push	r3
    3490:	4f 92       	push	r4
    3492:	5f 92       	push	r5
    3494:	6f 92       	push	r6
    3496:	7f 92       	push	r7
    3498:	8f 92       	push	r8
    349a:	9f 92       	push	r9
    349c:	af 92       	push	r10
    349e:	bf 92       	push	r11
    34a0:	cf 92       	push	r12
    34a2:	df 92       	push	r13
    34a4:	ef 92       	push	r14
    34a6:	ff 92       	push	r15
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	ca 1b       	sub	r28, r26
    34b6:	db 0b       	sbc	r29, r27
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	09 94       	ijmp

000034c4 <__epilogue_restores__>:
    34c4:	2a 88       	ldd	r2, Y+18	; 0x12
    34c6:	39 88       	ldd	r3, Y+17	; 0x11
    34c8:	48 88       	ldd	r4, Y+16	; 0x10
    34ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    34cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    34ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    34d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    34d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    34d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    34d6:	b9 84       	ldd	r11, Y+9	; 0x09
    34d8:	c8 84       	ldd	r12, Y+8	; 0x08
    34da:	df 80       	ldd	r13, Y+7	; 0x07
    34dc:	ee 80       	ldd	r14, Y+6	; 0x06
    34de:	fd 80       	ldd	r15, Y+5	; 0x05
    34e0:	0c 81       	ldd	r16, Y+4	; 0x04
    34e2:	1b 81       	ldd	r17, Y+3	; 0x03
    34e4:	aa 81       	ldd	r26, Y+2	; 0x02
    34e6:	b9 81       	ldd	r27, Y+1	; 0x01
    34e8:	ce 0f       	add	r28, r30
    34ea:	d1 1d       	adc	r29, r1
    34ec:	0f b6       	in	r0, 0x3f	; 63
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	ed 01       	movw	r28, r26
    34f8:	08 95       	ret

000034fa <_exit>:
    34fa:	f8 94       	cli

000034fc <__stop_program>:
    34fc:	ff cf       	rjmp	.-2      	; 0x34fc <__stop_program>
